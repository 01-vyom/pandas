{
    "benchmarks": {
        "attrs_caching.getattr_dataframe_index.time_getattr_dataframe_index": {
            "code": "def time_getattr_dataframe_index(self):\n    self.foo = self.df.index\n", 
            "goal_time": 0.2, 
            "name": "attrs_caching.getattr_dataframe_index.time_getattr_dataframe_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "attrs_caching.setattr_dataframe_index.time_setattr_dataframe_index": {
            "code": "def time_setattr_dataframe_index(self):\n    self.df.index = self.cur_index\n", 
            "goal_time": 0.2, 
            "name": "attrs_caching.setattr_dataframe_index.time_setattr_dataframe_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_add.time_frame_add": {
            "code": "def time_frame_add(self):\n    (self.df + self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_add.time_frame_add", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_add_no_ne.time_frame_add_no_ne": {
            "code": "def time_frame_add_no_ne(self):\n    (self.df + self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_add_no_ne.time_frame_add_no_ne", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_add_st.time_frame_add_st": {
            "code": "def time_frame_add_st(self):\n    (self.df + self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_add_st.time_frame_add_st", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_float_div.time_frame_float_div": {
            "code": "def time_frame_float_div(self):\n    (self.df // self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_float_div.time_frame_float_div", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_float_div_by_zero.time_frame_float_div_by_zero": {
            "code": "def time_frame_float_div_by_zero(self):\n    (self.df / 0)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_float_div_by_zero.time_frame_float_div_by_zero", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_float_floor_by_zero.time_frame_float_floor_by_zero": {
            "code": "def time_frame_float_floor_by_zero(self):\n    (self.df // 0)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_float_floor_by_zero.time_frame_float_floor_by_zero", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_float_mod.time_frame_float_mod": {
            "code": "def time_frame_float_mod(self):\n    (self.df / self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_float_mod.time_frame_float_mod", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_int_div_by_zero.time_frame_int_div_by_zero": {
            "code": "def time_frame_int_div_by_zero(self):\n    (self.df / 0)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_int_div_by_zero.time_frame_int_div_by_zero", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_int_mod.time_frame_int_mod": {
            "code": "def time_frame_int_mod(self):\n    (self.df / self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_int_mod.time_frame_int_mod", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_mult.time_frame_mult": {
            "code": "def time_frame_mult(self):\n    (self.df * self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_mult.time_frame_mult", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_mult_no_ne.time_frame_mult_no_ne": {
            "code": "def time_frame_mult_no_ne(self):\n    (self.df * self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_mult_no_ne.time_frame_mult_no_ne", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_mult_st.time_frame_mult_st": {
            "code": "def time_frame_mult_st(self):\n    (self.df * self.df2)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_mult_st.time_frame_mult_st", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_multi_and.time_frame_multi_and": {
            "code": "def time_frame_multi_and(self):\n    self.df[((self.df > 0) & (self.df2 > 0))]\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_multi_and.time_frame_multi_and", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_multi_and_no_ne.time_frame_multi_and_no_ne": {
            "code": "def time_frame_multi_and_no_ne(self):\n    self.df[((self.df > 0) & (self.df2 > 0))]\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_multi_and_no_ne.time_frame_multi_and_no_ne", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.frame_multi_and_st.time_frame_multi_and_st": {
            "code": "def time_frame_multi_and_st(self):\n    self.df[((self.df > 0) & (self.df2 > 0))]\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.frame_multi_and_st.time_frame_multi_and_st", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.series_timestamp_compare.time_series_timestamp_compare": {
            "code": "def time_series_timestamp_compare(self):\n    (self.s <= self.ts)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.series_timestamp_compare.time_series_timestamp_compare", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.timestamp_ops_diff1.time_timestamp_ops_diff1": {
            "code": "def time_timestamp_ops_diff1(self):\n    self.s.diff()\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.timestamp_ops_diff1.time_timestamp_ops_diff1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.timestamp_ops_diff2.time_timestamp_ops_diff2": {
            "code": "def time_timestamp_ops_diff2(self):\n    (self.s - self.s.shift())\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.timestamp_ops_diff2.time_timestamp_ops_diff2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.timestamp_series_compare.time_timestamp_series_compare": {
            "code": "def time_timestamp_series_compare(self):\n    (self.ts >= self.s)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.timestamp_series_compare.time_timestamp_series_compare", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.timestamp_tz_ops_diff1.time_timestamp_ops_diff1": {
            "code": "def time_timestamp_ops_diff1(self):\n    self.s.diff()\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.timestamp_tz_ops_diff1.time_timestamp_ops_diff1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.timestamp_tz_ops_diff2.time_timestamp_ops_diff2": {
            "code": "def time_timestamp_ops_diff2(self):\n    (self.s - self.s.shift())\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.timestamp_tz_ops_diff2.time_timestamp_ops_diff2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "binary_ops.timestamp_tz_series_compare.time_timestamp_series_compare": {
            "code": "def time_timestamp_series_compare(self):\n    (self.ts >= self.s)\n", 
            "goal_time": 0.2, 
            "name": "binary_ops.timestamp_tz_series_compare.time_timestamp_series_compare", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "categoricals.categorical_constructor.time_fastpath": {
            "code": "def time_fastpath(self):\n    Categorical(self.codes, self.cat_idx, fastpath=True)\n", 
            "goal_time": 0.2, 
            "name": "categoricals.categorical_constructor.time_fastpath", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "categoricals.categorical_constructor.time_regular_constructor": {
            "code": "def time_regular_constructor(self):\n    Categorical(self.values, self.categories)\n", 
            "goal_time": 0.2, 
            "name": "categoricals.categorical_constructor.time_regular_constructor", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "categoricals.categorical_value_counts.time_value_counts": {
            "code": "def time_value_counts(self):\n    self.ts.value_counts(dropna=False)\n", 
            "goal_time": 1, 
            "name": "categoricals.categorical_value_counts.time_value_counts", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "categoricals.categorical_value_counts.time_value_counts_dropna": {
            "code": "def time_value_counts_dropna(self):\n    self.ts.value_counts(dropna=True)\n", 
            "goal_time": 1, 
            "name": "categoricals.categorical_value_counts.time_value_counts_dropna", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "categoricals.concat_categorical.time_concat_categorical": {
            "code": "def time_concat_categorical(self):\n    concat([self.s, self.s])\n", 
            "goal_time": 0.2, 
            "name": "categoricals.concat_categorical.time_concat_categorical", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "ctors.ctor_index_array_string.time_ctor_index_array_string": {
            "code": "def time_ctor_index_array_string(self):\n    Index(self.data)\n", 
            "goal_time": 0.2, 
            "name": "ctors.ctor_index_array_string.time_ctor_index_array_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "ctors.dtindex_from_series_ctor.time_dtindex_from_series_ctor": {
            "code": "def time_dtindex_from_series_ctor(self):\n    DatetimeIndex(self.s)\n", 
            "goal_time": 0.2, 
            "name": "ctors.dtindex_from_series_ctor.time_dtindex_from_series_ctor", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "ctors.frame_constructor_ndarray.time_frame_constructor_ndarray": {
            "code": "def time_frame_constructor_ndarray(self):\n    DataFrame(self.arr)\n", 
            "goal_time": 0.2, 
            "name": "ctors.frame_constructor_ndarray.time_frame_constructor_ndarray", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "ctors.index_from_series_ctor.time_index_from_series_ctor": {
            "code": "def time_index_from_series_ctor(self):\n    Index(self.s)\n", 
            "goal_time": 0.2, 
            "name": "ctors.index_from_series_ctor.time_index_from_series_ctor", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "ctors.series_constructor_ndarray.time_series_constructor_ndarray": {
            "code": "def time_series_constructor_ndarray(self):\n    Series(self.data, index=self.index)\n", 
            "goal_time": 0.2, 
            "name": "ctors.series_constructor_ndarray.time_series_constructor_ndarray", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_add_all_threads.time_eval_frame_add_all_threads": {
            "code": "def time_eval_frame_add_all_threads(self):\n    pd.eval('df + df2 + df3 + df4')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_add_all_threads.time_eval_frame_add_all_threads", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_add_one_thread.time_eval_frame_add_one_thread": {
            "code": "def time_eval_frame_add_one_thread(self):\n    pd.eval('df + df2 + df3 + df4')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_add_one_thread.time_eval_frame_add_one_thread", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_add_python.time_eval_frame_add_python": {
            "code": "def time_eval_frame_add_python(self):\n    pd.eval('df + df2 + df3 + df4', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_add_python.time_eval_frame_add_python", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_add_python_one_thread.time_eval_frame_add_python_one_thread": {
            "code": "def time_eval_frame_add_python_one_thread(self):\n    pd.eval('df + df2 + df3 + df4', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_add_python_one_thread.time_eval_frame_add_python_one_thread", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_and_all_threads.time_eval_frame_and_all_threads": {
            "code": "def time_eval_frame_and_all_threads(self):\n    pd.eval('(df > 0) & (df2 > 0) & (df3 > 0) & (df4 > 0)')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_and_all_threads.time_eval_frame_and_all_threads", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_and_python.time_eval_frame_and_python": {
            "code": "def time_eval_frame_and_python(self):\n    pd.eval('(df > 0) & (df2 > 0) & (df3 > 0) & (df4 > 0)', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_and_python.time_eval_frame_and_python", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_and_python_one_thread.time_eval_frame_and_python_one_thread": {
            "code": "def time_eval_frame_and_python_one_thread(self):\n    pd.eval('(df > 0) & (df2 > 0) & (df3 > 0) & (df4 > 0)', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_and_python_one_thread.time_eval_frame_and_python_one_thread", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_chained_cmp_all_threads.time_eval_frame_chained_cmp_all_threads": {
            "code": "def time_eval_frame_chained_cmp_all_threads(self):\n    pd.eval('df < df2 < df3 < df4')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_chained_cmp_all_threads.time_eval_frame_chained_cmp_all_threads", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_chained_cmp_python.time_eval_frame_chained_cmp_python": {
            "code": "def time_eval_frame_chained_cmp_python(self):\n    pd.eval('df < df2 < df3 < df4', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_chained_cmp_python.time_eval_frame_chained_cmp_python", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_chained_cmp_python_one_thread.time_eval_frame_chained_cmp_python_one_thread": {
            "code": "def time_eval_frame_chained_cmp_python_one_thread(self):\n    pd.eval('df < df2 < df3 < df4', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_chained_cmp_python_one_thread.time_eval_frame_chained_cmp_python_one_thread", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_mult_all_threads.time_eval_frame_mult_all_threads": {
            "code": "def time_eval_frame_mult_all_threads(self):\n    pd.eval('df * df2 * df3 * df4')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_mult_all_threads.time_eval_frame_mult_all_threads", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_mult_one_thread.time_eval_frame_mult_one_thread": {
            "code": "def time_eval_frame_mult_one_thread(self):\n    pd.eval('df * df2 * df3 * df4')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_mult_one_thread.time_eval_frame_mult_one_thread", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_mult_python.time_eval_frame_mult_python": {
            "code": "def time_eval_frame_mult_python(self):\n    pd.eval('df * df2 * df3 * df4', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_mult_python.time_eval_frame_mult_python", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.eval_frame_mult_python_one_thread.time_eval_frame_mult_python_one_thread": {
            "code": "def time_eval_frame_mult_python_one_thread(self):\n    pd.eval('df * df2 * df3 * df4', engine='python')\n", 
            "goal_time": 0.2, 
            "name": "eval.eval_frame_mult_python_one_thread.time_eval_frame_mult_python_one_thread", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.query_datetime_index.time_query_datetime_index": {
            "code": "def time_query_datetime_index(self):\n    self.df.query('index < @ts')\n", 
            "goal_time": 0.2, 
            "name": "eval.query_datetime_index.time_query_datetime_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.query_datetime_series.time_query_datetime_series": {
            "code": "def time_query_datetime_series(self):\n    self.df.query('dates < @ts')\n", 
            "goal_time": 0.2, 
            "name": "eval.query_datetime_series.time_query_datetime_series", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "eval.query_with_boolean_selection.time_query_with_boolean_selection": {
            "code": "def time_query_with_boolean_selection(self):\n    self.df.query('(a >= @min_val) & (a <= @max_val)')\n", 
            "goal_time": 0.2, 
            "name": "eval.query_with_boolean_selection.time_query_with_boolean_selection", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BDayx1.time_frame_ctor_dtindex_BDayx1": {
            "code": "def time_frame_ctor_dtindex_BDayx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BDayx1.time_frame_ctor_dtindex_BDayx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BDayx2.time_frame_ctor_dtindex_BDayx2": {
            "code": "def time_frame_ctor_dtindex_BDayx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BDayx2.time_frame_ctor_dtindex_BDayx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BMonthBeginx1.time_frame_ctor_dtindex_BMonthBeginx1": {
            "code": "def time_frame_ctor_dtindex_BMonthBeginx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BMonthBeginx1.time_frame_ctor_dtindex_BMonthBeginx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BMonthBeginx2.time_frame_ctor_dtindex_BMonthBeginx2": {
            "code": "def time_frame_ctor_dtindex_BMonthBeginx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BMonthBeginx2.time_frame_ctor_dtindex_BMonthBeginx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BMonthEndx1.time_frame_ctor_dtindex_BMonthEndx1": {
            "code": "def time_frame_ctor_dtindex_BMonthEndx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BMonthEndx1.time_frame_ctor_dtindex_BMonthEndx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BMonthEndx2.time_frame_ctor_dtindex_BMonthEndx2": {
            "code": "def time_frame_ctor_dtindex_BMonthEndx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BMonthEndx2.time_frame_ctor_dtindex_BMonthEndx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BQuarterBeginx1.time_frame_ctor_dtindex_BQuarterBeginx1": {
            "code": "def time_frame_ctor_dtindex_BQuarterBeginx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BQuarterBeginx1.time_frame_ctor_dtindex_BQuarterBeginx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BQuarterBeginx2.time_frame_ctor_dtindex_BQuarterBeginx2": {
            "code": "def time_frame_ctor_dtindex_BQuarterBeginx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BQuarterBeginx2.time_frame_ctor_dtindex_BQuarterBeginx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BQuarterEndx1.time_frame_ctor_dtindex_BQuarterEndx1": {
            "code": "def time_frame_ctor_dtindex_BQuarterEndx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BQuarterEndx1.time_frame_ctor_dtindex_BQuarterEndx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BQuarterEndx2.time_frame_ctor_dtindex_BQuarterEndx2": {
            "code": "def time_frame_ctor_dtindex_BQuarterEndx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BQuarterEndx2.time_frame_ctor_dtindex_BQuarterEndx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BYearBeginx1.time_frame_ctor_dtindex_BYearBeginx1": {
            "code": "def time_frame_ctor_dtindex_BYearBeginx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BYearBeginx1.time_frame_ctor_dtindex_BYearBeginx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BYearBeginx2.time_frame_ctor_dtindex_BYearBeginx2": {
            "code": "def time_frame_ctor_dtindex_BYearBeginx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BYearBeginx2.time_frame_ctor_dtindex_BYearBeginx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BYearEndx1.time_frame_ctor_dtindex_BYearEndx1": {
            "code": "def time_frame_ctor_dtindex_BYearEndx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BYearEndx1.time_frame_ctor_dtindex_BYearEndx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BYearEndx2.time_frame_ctor_dtindex_BYearEndx2": {
            "code": "def time_frame_ctor_dtindex_BYearEndx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BYearEndx2.time_frame_ctor_dtindex_BYearEndx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BusinessDayx1.time_frame_ctor_dtindex_BusinessDayx1": {
            "code": "def time_frame_ctor_dtindex_BusinessDayx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BusinessDayx1.time_frame_ctor_dtindex_BusinessDayx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BusinessDayx2.time_frame_ctor_dtindex_BusinessDayx2": {
            "code": "def time_frame_ctor_dtindex_BusinessDayx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BusinessDayx2.time_frame_ctor_dtindex_BusinessDayx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BusinessHourx1.time_frame_ctor_dtindex_BusinessHourx1": {
            "code": "def time_frame_ctor_dtindex_BusinessHourx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BusinessHourx1.time_frame_ctor_dtindex_BusinessHourx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_BusinessHourx2.time_frame_ctor_dtindex_BusinessHourx2": {
            "code": "def time_frame_ctor_dtindex_BusinessHourx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_BusinessHourx2.time_frame_ctor_dtindex_BusinessHourx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CBMonthBeginx1.time_frame_ctor_dtindex_CBMonthBeginx1": {
            "code": "def time_frame_ctor_dtindex_CBMonthBeginx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CBMonthBeginx1.time_frame_ctor_dtindex_CBMonthBeginx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CBMonthBeginx2.time_frame_ctor_dtindex_CBMonthBeginx2": {
            "code": "def time_frame_ctor_dtindex_CBMonthBeginx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CBMonthBeginx2.time_frame_ctor_dtindex_CBMonthBeginx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CBMonthEndx1.time_frame_ctor_dtindex_CBMonthEndx1": {
            "code": "def time_frame_ctor_dtindex_CBMonthEndx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CBMonthEndx1.time_frame_ctor_dtindex_CBMonthEndx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CBMonthEndx2.time_frame_ctor_dtindex_CBMonthEndx2": {
            "code": "def time_frame_ctor_dtindex_CBMonthEndx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CBMonthEndx2.time_frame_ctor_dtindex_CBMonthEndx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CDayx1.time_frame_ctor_dtindex_CDayx1": {
            "code": "def time_frame_ctor_dtindex_CDayx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CDayx1.time_frame_ctor_dtindex_CDayx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CDayx2.time_frame_ctor_dtindex_CDayx2": {
            "code": "def time_frame_ctor_dtindex_CDayx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CDayx2.time_frame_ctor_dtindex_CDayx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CustomBusinessDayx1.time_frame_ctor_dtindex_CustomBusinessDayx1": {
            "code": "def time_frame_ctor_dtindex_CustomBusinessDayx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CustomBusinessDayx1.time_frame_ctor_dtindex_CustomBusinessDayx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_CustomBusinessDayx2.time_frame_ctor_dtindex_CustomBusinessDayx2": {
            "code": "def time_frame_ctor_dtindex_CustomBusinessDayx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_CustomBusinessDayx2.time_frame_ctor_dtindex_CustomBusinessDayx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_DateOffsetx1.time_frame_ctor_dtindex_DateOffsetx1": {
            "code": "def time_frame_ctor_dtindex_DateOffsetx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_DateOffsetx1.time_frame_ctor_dtindex_DateOffsetx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_DateOffsetx2.time_frame_ctor_dtindex_DateOffsetx2": {
            "code": "def time_frame_ctor_dtindex_DateOffsetx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_DateOffsetx2.time_frame_ctor_dtindex_DateOffsetx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Dayx1.time_frame_ctor_dtindex_Dayx1": {
            "code": "def time_frame_ctor_dtindex_Dayx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Dayx1.time_frame_ctor_dtindex_Dayx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Dayx2.time_frame_ctor_dtindex_Dayx2": {
            "code": "def time_frame_ctor_dtindex_Dayx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Dayx2.time_frame_ctor_dtindex_Dayx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Easterx1.time_frame_ctor_dtindex_Easterx1": {
            "code": "def time_frame_ctor_dtindex_Easterx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Easterx1.time_frame_ctor_dtindex_Easterx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Easterx2.time_frame_ctor_dtindex_Easterx2": {
            "code": "def time_frame_ctor_dtindex_Easterx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Easterx2.time_frame_ctor_dtindex_Easterx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253Quarterx1__variation_last.time_frame_ctor_dtindex_FY5253Quarterx1__variation_last": {
            "code": "def time_frame_ctor_dtindex_FY5253Quarterx1__variation_last(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253Quarterx1__variation_last.time_frame_ctor_dtindex_FY5253Quarterx1__variation_last", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253Quarterx1__variation_nearest.time_frame_ctor_dtindex_FY5253Quarterx1__variation_nearest": {
            "code": "def time_frame_ctor_dtindex_FY5253Quarterx1__variation_nearest(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253Quarterx1__variation_nearest.time_frame_ctor_dtindex_FY5253Quarterx1__variation_nearest", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253Quarterx2__variation_last.time_frame_ctor_dtindex_FY5253Quarterx2__variation_last": {
            "code": "def time_frame_ctor_dtindex_FY5253Quarterx2__variation_last(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253Quarterx2__variation_last.time_frame_ctor_dtindex_FY5253Quarterx2__variation_last", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253Quarterx2__variation_nearest.time_frame_ctor_dtindex_FY5253Quarterx2__variation_nearest": {
            "code": "def time_frame_ctor_dtindex_FY5253Quarterx2__variation_nearest(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253Quarterx2__variation_nearest.time_frame_ctor_dtindex_FY5253Quarterx2__variation_nearest", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253x1__variation_last.time_frame_ctor_dtindex_FY5253x1__variation_last": {
            "code": "def time_frame_ctor_dtindex_FY5253x1__variation_last(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253x1__variation_last.time_frame_ctor_dtindex_FY5253x1__variation_last", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253x1__variation_nearest.time_frame_ctor_dtindex_FY5253x1__variation_nearest": {
            "code": "def time_frame_ctor_dtindex_FY5253x1__variation_nearest(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253x1__variation_nearest.time_frame_ctor_dtindex_FY5253x1__variation_nearest", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253x2__variation_last.time_frame_ctor_dtindex_FY5253x2__variation_last": {
            "code": "def time_frame_ctor_dtindex_FY5253x2__variation_last(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253x2__variation_last.time_frame_ctor_dtindex_FY5253x2__variation_last", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_FY5253x2__variation_nearest.time_frame_ctor_dtindex_FY5253x2__variation_nearest": {
            "code": "def time_frame_ctor_dtindex_FY5253x2__variation_nearest(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_FY5253x2__variation_nearest.time_frame_ctor_dtindex_FY5253x2__variation_nearest", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Hourx1.time_frame_ctor_dtindex_Hourx1": {
            "code": "def time_frame_ctor_dtindex_Hourx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Hourx1.time_frame_ctor_dtindex_Hourx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Hourx2.time_frame_ctor_dtindex_Hourx2": {
            "code": "def time_frame_ctor_dtindex_Hourx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Hourx2.time_frame_ctor_dtindex_Hourx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_LastWeekOfMonthx1.time_frame_ctor_dtindex_LastWeekOfMonthx1": {
            "code": "def time_frame_ctor_dtindex_LastWeekOfMonthx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_LastWeekOfMonthx1.time_frame_ctor_dtindex_LastWeekOfMonthx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_LastWeekOfMonthx2.time_frame_ctor_dtindex_LastWeekOfMonthx2": {
            "code": "def time_frame_ctor_dtindex_LastWeekOfMonthx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_LastWeekOfMonthx2.time_frame_ctor_dtindex_LastWeekOfMonthx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Microx1.time_frame_ctor_dtindex_Microx1": {
            "code": "def time_frame_ctor_dtindex_Microx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Microx1.time_frame_ctor_dtindex_Microx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Microx2.time_frame_ctor_dtindex_Microx2": {
            "code": "def time_frame_ctor_dtindex_Microx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Microx2.time_frame_ctor_dtindex_Microx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Millix1.time_frame_ctor_dtindex_Millix1": {
            "code": "def time_frame_ctor_dtindex_Millix1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Millix1.time_frame_ctor_dtindex_Millix1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Millix2.time_frame_ctor_dtindex_Millix2": {
            "code": "def time_frame_ctor_dtindex_Millix2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Millix2.time_frame_ctor_dtindex_Millix2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Minutex1.time_frame_ctor_dtindex_Minutex1": {
            "code": "def time_frame_ctor_dtindex_Minutex1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Minutex1.time_frame_ctor_dtindex_Minutex1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Minutex2.time_frame_ctor_dtindex_Minutex2": {
            "code": "def time_frame_ctor_dtindex_Minutex2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Minutex2.time_frame_ctor_dtindex_Minutex2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_MonthBeginx1.time_frame_ctor_dtindex_MonthBeginx1": {
            "code": "def time_frame_ctor_dtindex_MonthBeginx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_MonthBeginx1.time_frame_ctor_dtindex_MonthBeginx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_MonthBeginx2.time_frame_ctor_dtindex_MonthBeginx2": {
            "code": "def time_frame_ctor_dtindex_MonthBeginx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_MonthBeginx2.time_frame_ctor_dtindex_MonthBeginx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_MonthEndx1.time_frame_ctor_dtindex_MonthEndx1": {
            "code": "def time_frame_ctor_dtindex_MonthEndx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_MonthEndx1.time_frame_ctor_dtindex_MonthEndx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_MonthEndx2.time_frame_ctor_dtindex_MonthEndx2": {
            "code": "def time_frame_ctor_dtindex_MonthEndx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_MonthEndx2.time_frame_ctor_dtindex_MonthEndx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Nanox1.time_frame_ctor_dtindex_Nanox1": {
            "code": "def time_frame_ctor_dtindex_Nanox1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Nanox1.time_frame_ctor_dtindex_Nanox1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Nanox2.time_frame_ctor_dtindex_Nanox2": {
            "code": "def time_frame_ctor_dtindex_Nanox2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Nanox2.time_frame_ctor_dtindex_Nanox2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_QuarterBeginx1.time_frame_ctor_dtindex_QuarterBeginx1": {
            "code": "def time_frame_ctor_dtindex_QuarterBeginx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_QuarterBeginx1.time_frame_ctor_dtindex_QuarterBeginx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_QuarterBeginx2.time_frame_ctor_dtindex_QuarterBeginx2": {
            "code": "def time_frame_ctor_dtindex_QuarterBeginx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_QuarterBeginx2.time_frame_ctor_dtindex_QuarterBeginx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_QuarterEndx1.time_frame_ctor_dtindex_QuarterEndx1": {
            "code": "def time_frame_ctor_dtindex_QuarterEndx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_QuarterEndx1.time_frame_ctor_dtindex_QuarterEndx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_QuarterEndx2.time_frame_ctor_dtindex_QuarterEndx2": {
            "code": "def time_frame_ctor_dtindex_QuarterEndx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_QuarterEndx2.time_frame_ctor_dtindex_QuarterEndx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Secondx1.time_frame_ctor_dtindex_Secondx1": {
            "code": "def time_frame_ctor_dtindex_Secondx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Secondx1.time_frame_ctor_dtindex_Secondx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Secondx2.time_frame_ctor_dtindex_Secondx2": {
            "code": "def time_frame_ctor_dtindex_Secondx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Secondx2.time_frame_ctor_dtindex_Secondx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_WeekOfMonthx1.time_frame_ctor_dtindex_WeekOfMonthx1": {
            "code": "def time_frame_ctor_dtindex_WeekOfMonthx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_WeekOfMonthx1.time_frame_ctor_dtindex_WeekOfMonthx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_WeekOfMonthx2.time_frame_ctor_dtindex_WeekOfMonthx2": {
            "code": "def time_frame_ctor_dtindex_WeekOfMonthx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_WeekOfMonthx2.time_frame_ctor_dtindex_WeekOfMonthx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Weekx1.time_frame_ctor_dtindex_Weekx1": {
            "code": "def time_frame_ctor_dtindex_Weekx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Weekx1.time_frame_ctor_dtindex_Weekx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_Weekx2.time_frame_ctor_dtindex_Weekx2": {
            "code": "def time_frame_ctor_dtindex_Weekx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_Weekx2.time_frame_ctor_dtindex_Weekx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_YearBeginx1.time_frame_ctor_dtindex_YearBeginx1": {
            "code": "def time_frame_ctor_dtindex_YearBeginx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_YearBeginx1.time_frame_ctor_dtindex_YearBeginx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_YearBeginx2.time_frame_ctor_dtindex_YearBeginx2": {
            "code": "def time_frame_ctor_dtindex_YearBeginx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_YearBeginx2.time_frame_ctor_dtindex_YearBeginx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_YearEndx1.time_frame_ctor_dtindex_YearEndx1": {
            "code": "def time_frame_ctor_dtindex_YearEndx1(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_YearEndx1.time_frame_ctor_dtindex_YearEndx1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_dtindex_YearEndx2.time_frame_ctor_dtindex_YearEndx2": {
            "code": "def time_frame_ctor_dtindex_YearEndx2(self):\n    DataFrame(self.d)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_dtindex_YearEndx2.time_frame_ctor_dtindex_YearEndx2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_list_of_dict.time_frame_ctor_list_of_dict": {
            "code": "def time_frame_ctor_list_of_dict(self):\n    DataFrame(self.dict_list)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_list_of_dict.time_frame_ctor_list_of_dict", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_nested_dict.time_frame_ctor_nested_dict": {
            "code": "def time_frame_ctor_nested_dict(self):\n    DataFrame(self.data)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_nested_dict.time_frame_ctor_nested_dict", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_ctor_nested_dict_int64.time_frame_ctor_nested_dict_int64": {
            "code": "def time_frame_ctor_nested_dict_int64(self):\n    DataFrame(self.data)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_ctor_nested_dict_int64.time_frame_ctor_nested_dict_int64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_from_series.time_frame_from_series": {
            "code": "def time_frame_from_series(self):\n    DataFrame(self.s)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_from_series.time_frame_from_series", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.frame_get_numeric_data.time_frame_get_numeric_data": {
            "code": "def time_frame_get_numeric_data(self):\n    self.df._get_numeric_data()\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.frame_get_numeric_data.time_frame_get_numeric_data", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_ctor.series_ctor_from_dict.time_series_ctor_from_dict": {
            "code": "def time_series_ctor_from_dict(self):\n    Series(self.some_dict)\n", 
            "goal_time": 0.2, 
            "name": "frame_ctor.series_ctor_from_dict.time_series_ctor_from_dict", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_apply_axis_1.time_frame_apply_axis_1": {
            "code": "def time_frame_apply_axis_1(self):\n    self.df.apply((lambda x: (x + 1)), axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_apply_axis_1.time_frame_apply_axis_1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_apply_lambda_mean.time_frame_apply_lambda_mean": {
            "code": "def time_frame_apply_lambda_mean(self):\n    self.df.apply((lambda x: x.sum()))\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_apply_lambda_mean.time_frame_apply_lambda_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_apply_np_mean.time_frame_apply_np_mean": {
            "code": "def time_frame_apply_np_mean(self):\n    self.df.apply(np.mean)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_apply_np_mean.time_frame_apply_np_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_apply_pass_thru.time_frame_apply_pass_thru": {
            "code": "def time_frame_apply_pass_thru(self):\n    self.df.apply((lambda x: x))\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_apply_pass_thru.time_frame_apply_pass_thru", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_apply_ref_by_name.time_frame_apply_ref_by_name": {
            "code": "def time_frame_apply_ref_by_name(self):\n    self.df.apply((lambda x: (x['A'] + x['B'])), axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_apply_ref_by_name.time_frame_apply_ref_by_name", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_apply_user_func.time_frame_apply_user_func": {
            "code": "def time_frame_apply_user_func(self):\n    self.df.apply((lambda x: np.corrcoef(x, self.s)[(0, 1)]))\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_apply_user_func.time_frame_apply_user_func", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_assign_timeseries_index.time_frame_assign_timeseries_index": {
            "code": "def time_frame_assign_timeseries_index(self):\n    self.f(self.df)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_assign_timeseries_index.time_frame_assign_timeseries_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_boolean_row_select.time_frame_boolean_row_select": {
            "code": "def time_frame_boolean_row_select(self):\n    self.df[self.bool_arr]\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_boolean_row_select.time_frame_boolean_row_select", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_count_level_axis0_mixed_dtypes_multi.time_frame_count_level_axis0_mixed_dtypes_multi": {
            "code": "def time_frame_count_level_axis0_mixed_dtypes_multi(self):\n    self.df.count(axis=0, level=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_count_level_axis0_mixed_dtypes_multi.time_frame_count_level_axis0_mixed_dtypes_multi", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_count_level_axis0_multi.time_frame_count_level_axis0_multi": {
            "code": "def time_frame_count_level_axis0_multi(self):\n    self.df.count(axis=0, level=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_count_level_axis0_multi.time_frame_count_level_axis0_multi", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_count_level_axis1_mixed_dtypes_multi.time_frame_count_level_axis1_mixed_dtypes_multi": {
            "code": "def time_frame_count_level_axis1_mixed_dtypes_multi(self):\n    self.df.count(axis=1, level=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_count_level_axis1_mixed_dtypes_multi.time_frame_count_level_axis1_mixed_dtypes_multi", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_count_level_axis1_multi.time_frame_count_level_axis1_multi": {
            "code": "def time_frame_count_level_axis1_multi(self):\n    self.df.count(axis=1, level=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_count_level_axis1_multi.time_frame_count_level_axis1_multi", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis0_all.time_frame_dropna_axis0_all": {
            "code": "def time_frame_dropna_axis0_all(self):\n    self.df.dropna(how='all', axis=0)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis0_all.time_frame_dropna_axis0_all", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis0_all_mixed_dtypes.time_frame_dropna_axis0_all_mixed_dtypes": {
            "code": "def time_frame_dropna_axis0_all_mixed_dtypes(self):\n    self.df.dropna(how='all', axis=0)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis0_all_mixed_dtypes.time_frame_dropna_axis0_all_mixed_dtypes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis0_any.time_frame_dropna_axis0_any": {
            "code": "def time_frame_dropna_axis0_any(self):\n    self.df.dropna(how='any', axis=0)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis0_any.time_frame_dropna_axis0_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis0_any_mixed_dtypes.time_frame_dropna_axis0_any_mixed_dtypes": {
            "code": "def time_frame_dropna_axis0_any_mixed_dtypes(self):\n    self.df.dropna(how='any', axis=0)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis0_any_mixed_dtypes.time_frame_dropna_axis0_any_mixed_dtypes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis1_all.time_frame_dropna_axis1_all": {
            "code": "def time_frame_dropna_axis1_all(self):\n    self.df.dropna(how='all', axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis1_all.time_frame_dropna_axis1_all", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis1_all_mixed_dtypes.time_frame_dropna_axis1_all_mixed_dtypes": {
            "code": "def time_frame_dropna_axis1_all_mixed_dtypes(self):\n    self.df.dropna(how='all', axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis1_all_mixed_dtypes.time_frame_dropna_axis1_all_mixed_dtypes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis1_any.time_frame_dropna_axis1_any": {
            "code": "def time_frame_dropna_axis1_any(self):\n    self.df.dropna(how='any', axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis1_any.time_frame_dropna_axis1_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dropna_axis1_any_mixed_dtypes.time_frame_dropna_axis1_any_mixed_dtypes": {
            "code": "def time_frame_dropna_axis1_any_mixed_dtypes(self):\n    self.df.dropna(how='any', axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dropna_axis1_any_mixed_dtypes.time_frame_dropna_axis1_any_mixed_dtypes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_dtypes.time_frame_dtypes": {
            "code": "def time_frame_dtypes(self):\n    self.df.dtypes\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_dtypes.time_frame_dtypes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_duplicated.time_frame_duplicated": {
            "code": "def time_frame_duplicated(self):\n    self.df.duplicated()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_duplicated.time_frame_duplicated", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_fancy_lookup.time_frame_fancy_lookup": {
            "code": "def time_frame_fancy_lookup(self):\n    self.df.lookup(self.row_labels, self.col_labels)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_fancy_lookup.time_frame_fancy_lookup", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_fancy_lookup_all.time_frame_fancy_lookup_all": {
            "code": "def time_frame_fancy_lookup_all(self):\n    self.df.lookup(self.row_labels_all, self.col_labels_all)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_fancy_lookup_all.time_frame_fancy_lookup_all", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_fillna_inplace.time_frame_fillna_inplace": {
            "code": "def time_frame_fillna_inplace(self):\n    self.df.fillna(0, inplace=True)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_fillna_inplace.time_frame_fillna_inplace", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_float_equal.time_frame_float_equal": {
            "code": "def time_frame_float_equal(self):\n    self.test_equal('float_df')\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_float_equal.time_frame_float_equal", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_float_unequal.time_frame_float_unequal": {
            "code": "def time_frame_float_unequal(self):\n    self.test_unequal('float_df')\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_float_unequal.time_frame_float_unequal", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_from_records_generator.time_frame_from_records_generator": {
            "code": "def time_frame_from_records_generator(self):\n    self.df = DataFrame.from_records(self.get_data())\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_from_records_generator.time_frame_from_records_generator", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_from_records_generator_nrows.time_frame_from_records_generator_nrows": {
            "code": "def time_frame_from_records_generator_nrows(self):\n    self.df = DataFrame.from_records(self.get_data(), nrows=1000)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_from_records_generator_nrows.time_frame_from_records_generator_nrows", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_get_dtype_counts.time_frame_get_dtype_counts": {
            "code": "def time_frame_get_dtype_counts(self):\n    self.df.get_dtype_counts()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_get_dtype_counts.time_frame_get_dtype_counts", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_getitem_single_column.time_frame_getitem_single_column": {
            "code": "def time_frame_getitem_single_column(self):\n    self.h()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_getitem_single_column.time_frame_getitem_single_column", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_getitem_single_column2.time_frame_getitem_single_column2": {
            "code": "def time_frame_getitem_single_column2(self):\n    self.j()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_getitem_single_column2.time_frame_getitem_single_column2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_html_repr_trunc_mi.time_frame_html_repr_trunc_mi": {
            "code": "def time_frame_html_repr_trunc_mi(self):\n    self.df._repr_html_()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_html_repr_trunc_mi.time_frame_html_repr_trunc_mi", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_html_repr_trunc_si.time_frame_html_repr_trunc_si": {
            "code": "def time_frame_html_repr_trunc_si(self):\n    self.df._repr_html_()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_html_repr_trunc_si.time_frame_html_repr_trunc_si", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_insert_100_columns_begin.time_frame_insert_100_columns_begin": {
            "code": "def time_frame_insert_100_columns_begin(self):\n    self.f()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_insert_100_columns_begin.time_frame_insert_100_columns_begin", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_insert_500_columns_end.time_frame_insert_500_columns_end": {
            "code": "def time_frame_insert_500_columns_end(self):\n    self.f()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_insert_500_columns_end.time_frame_insert_500_columns_end", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_interpolate.time_frame_interpolate": {
            "code": "def time_frame_interpolate(self):\n    self.df.interpolate()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_interpolate.time_frame_interpolate", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_interpolate_some_good.time_frame_interpolate_some_good": {
            "code": "def time_frame_interpolate_some_good(self):\n    self.df.interpolate()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_interpolate_some_good.time_frame_interpolate_some_good", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_interpolate_some_good_infer.time_frame_interpolate_some_good_infer": {
            "code": "def time_frame_interpolate_some_good_infer(self):\n    self.df.interpolate(downcast='infer')\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_interpolate_some_good_infer.time_frame_interpolate_some_good_infer", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_isnull.time_frame_isnull": {
            "code": "def time_frame_isnull(self):\n    isnull(self.df)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_isnull.time_frame_isnull", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_iteritems.time_frame_iteritems": {
            "code": "def time_frame_iteritems(self):\n    self.f()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_iteritems.time_frame_iteritems", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_iteritems_cached.time_frame_iteritems_cached": {
            "code": "def time_frame_iteritems_cached(self):\n    self.g()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_iteritems_cached.time_frame_iteritems_cached", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_mask_bools.time_frame_mask_bools": {
            "code": "def time_frame_mask_bools(self):\n    self.bools.mask(self.mask)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_mask_bools.time_frame_mask_bools", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_mask_floats.time_frame_mask_floats": {
            "code": "def time_frame_mask_floats(self):\n    self.bools.astype(float).mask(self.mask)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_mask_floats.time_frame_mask_floats", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_nonunique_equal.time_frame_nonunique_equal": {
            "code": "def time_frame_nonunique_equal(self):\n    self.test_equal('nonunique_cols')\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_nonunique_equal.time_frame_nonunique_equal", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_nonunique_unequal.time_frame_nonunique_unequal": {
            "code": "def time_frame_nonunique_unequal(self):\n    self.test_unequal('nonunique_cols')\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_nonunique_unequal.time_frame_nonunique_unequal", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_object_equal.time_frame_object_equal": {
            "code": "def time_frame_object_equal(self):\n    self.test_equal('object_df')\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_object_equal.time_frame_object_equal", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_object_unequal.time_frame_object_unequal": {
            "code": "def time_frame_object_unequal(self):\n    self.test_unequal('object_df')\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_object_unequal.time_frame_object_unequal", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_reindex_axis0.time_frame_reindex_axis0": {
            "code": "def time_frame_reindex_axis0(self):\n    self.df.reindex(self.idx)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_reindex_axis0.time_frame_reindex_axis0", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_reindex_axis1.time_frame_reindex_axis1": {
            "code": "def time_frame_reindex_axis1(self):\n    self.df.reindex(columns=self.idx)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_reindex_axis1.time_frame_reindex_axis1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_reindex_both_axes.time_frame_reindex_both_axes": {
            "code": "def time_frame_reindex_both_axes(self):\n    self.df.reindex(index=self.idx, columns=self.idx)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_reindex_both_axes.time_frame_reindex_both_axes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_reindex_both_axes_ix.time_frame_reindex_both_axes_ix": {
            "code": "def time_frame_reindex_both_axes_ix(self):\n    self.df.ix[(self.idx, self.idx)]\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_reindex_both_axes_ix.time_frame_reindex_both_axes_ix", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_reindex_upcast.time_frame_reindex_upcast": {
            "code": "def time_frame_reindex_upcast(self):\n    self.df.reindex(permutation(range(1200)))\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_reindex_upcast.time_frame_reindex_upcast", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_repr_tall.time_frame_repr_tall": {
            "code": "def time_frame_repr_tall(self):\n    repr(self.df)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_repr_tall.time_frame_repr_tall", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_repr_wide.time_frame_repr_wide": {
            "code": "def time_frame_repr_wide(self):\n    repr(self.df)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_repr_wide.time_frame_repr_wide", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_shift_axis0.time_frame_shift_axis0": {
            "code": "def time_frame_shift_axis0(self):\n    self.df.shift(1, axis=0)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_shift_axis0.time_frame_shift_axis0", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_shift_axis_1.time_frame_shift_axis_1": {
            "code": "def time_frame_shift_axis_1(self):\n    self.df.shift(1, axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_shift_axis_1.time_frame_shift_axis_1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_to_html_mixed.time_frame_to_html_mixed": {
            "code": "def time_frame_to_html_mixed(self):\n    self.df.to_html()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_to_html_mixed.time_frame_to_html_mixed", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_to_string_floats.time_frame_to_string_floats": {
            "code": "def time_frame_to_string_floats(self):\n    self.df.to_string()\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_to_string_floats.time_frame_to_string_floats", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_xs_col.time_frame_xs_col": {
            "code": "def time_frame_xs_col(self):\n    self.df.xs(50000, axis=1)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_xs_col.time_frame_xs_col", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.frame_xs_row.time_frame_xs_row": {
            "code": "def time_frame_xs_row(self):\n    self.df.xs(50000)\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.frame_xs_row.time_frame_xs_row", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "frame_methods.series_string_vector_slice.time_series_string_vector_slice": {
            "code": "def time_series_string_vector_slice(self):\n    self.s.str[:5]\n", 
            "goal_time": 0.2, 
            "name": "frame_methods.series_string_vector_slice.time_series_string_vector_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_count_2.time_nogil_groupby_count_2": {
            "code": "def time_nogil_groupby_count_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_count_2.time_nogil_groupby_count_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_last_2.time_nogil_groupby_last_2": {
            "code": "def time_nogil_groupby_last_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_last_2.time_nogil_groupby_last_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_max_2.time_nogil_groupby_max_2": {
            "code": "def time_nogil_groupby_max_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_max_2.time_nogil_groupby_max_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_mean_2.time_nogil_groupby_mean_2": {
            "code": "def time_nogil_groupby_mean_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_mean_2.time_nogil_groupby_mean_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_min_2.time_nogil_groupby_min_2": {
            "code": "def time_nogil_groupby_min_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_min_2.time_nogil_groupby_min_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_prod_2.time_nogil_groupby_prod_2": {
            "code": "def time_nogil_groupby_prod_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_prod_2.time_nogil_groupby_prod_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_sum_2.time_nogil_groupby_sum_2": {
            "code": "def time_nogil_groupby_sum_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_sum_2.time_nogil_groupby_sum_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_sum_4.time_nogil_groupby_sum_4": {
            "code": "def time_nogil_groupby_sum_4(self):\n    self.pg4()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_sum_4.time_nogil_groupby_sum_4", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_sum_8.time_nogil_groupby_sum_8": {
            "code": "def time_nogil_groupby_sum_8(self):\n    self.pg8()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_sum_8.time_nogil_groupby_sum_8", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_groupby_var_2.time_nogil_groupby_var_2": {
            "code": "def time_nogil_groupby_var_2(self):\n    self.pg2()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_groupby_var_2.time_nogil_groupby_var_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_kth_smallest.time_nogil_kth_smallest": {
            "code": "def time_nogil_kth_smallest(self):\n    @test_parallel(num_threads=2, kwargs_list=self.kwargs_list)\n    def run(arr):\n        algos.kth_smallest(arr, self.k)\n    run()\n", 
            "goal_time": 2.0, 
            "name": "gil.nogil_kth_smallest.time_nogil_kth_smallest", 
            "number": 1, 
            "param_names": [], 
            "params": [], 
            "repeat": 5, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_take1d_float64.time_nogil_take1d_float64": {
            "code": "def time_nogil_take1d_float64(self):\n    self.take_1d_pg2_int64()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_take1d_float64.time_nogil_take1d_float64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "gil.nogil_take1d_int64.time_nogil_take1d_int64": {
            "code": "def time_nogil_take1d_int64(self):\n    self.take_1d_pg2_float64()\n", 
            "goal_time": 0.2, 
            "name": "gil.nogil_take1d_int64.time_nogil_take1d_int64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_agg_builtins.time_groupby_agg_builtins1": {
            "code": "def time_groupby_agg_builtins1(self):\n    self.df.groupby('jim').agg([sum, min, max])\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_agg_builtins.time_groupby_agg_builtins1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_agg_builtins.time_groupby_agg_builtins2": {
            "code": "def time_groupby_agg_builtins2(self):\n    self.df.groupby(['jim', 'joe']).agg([sum, min, max])\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_agg_builtins.time_groupby_agg_builtins2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_agg_multi.time_groupby_multi_different_functions": {
            "code": "def time_groupby_multi_different_functions(self):\n    self.df.groupby(['key1', 'key2']).agg({'value1': 'mean', 'value2': 'var', 'value3': 'sum'})\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_agg_multi.time_groupby_multi_different_functions", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_agg_multi.time_groupby_multi_different_numpy_functions": {
            "code": "def time_groupby_multi_different_numpy_functions(self):\n    self.df.groupby(['key1', 'key2']).agg({'value1': np.mean, 'value2': np.var, 'value3': np.sum})\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_agg_multi.time_groupby_multi_different_numpy_functions", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_apply_dict_return.time_groupby_apply_dict_return": {
            "code": "def time_groupby_apply_dict_return(self):\n    self.data.groupby(self.labels).apply(self.f)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_apply_dict_return.time_groupby_apply_dict_return", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_first_float32": {
            "code": "def time_groupby_first_float32(self):\n    self.data2.groupby(self.labels).first()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_first_float32", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_first_float64": {
            "code": "def time_groupby_first_float64(self):\n    self.data.groupby(self.labels).first()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_first_float64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_last_float32": {
            "code": "def time_groupby_last_float32(self):\n    self.data2.groupby(self.labels).last()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_last_float32", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_last_float64": {
            "code": "def time_groupby_last_float64(self):\n    self.data.groupby(self.labels).last()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_last_float64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_nth_float32_any": {
            "code": "def time_groupby_nth_float32_any(self):\n    self.data2.groupby(self.labels).nth(0, dropna='all')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_nth_float32_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_nth_float32_none": {
            "code": "def time_groupby_nth_float32_none(self):\n    self.data2.groupby(self.labels).nth(0)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_nth_float32_none", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_nth_float64_any": {
            "code": "def time_groupby_nth_float64_any(self):\n    self.data.groupby(self.labels).nth(0, dropna='all')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_nth_float64_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last.time_groupby_nth_float64_none": {
            "code": "def time_groupby_nth_float64_none(self):\n    self.data.groupby(self.labels).nth(0)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last.time_groupby_nth_float64_none", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_datetimes.time_groupby_first_datetimes": {
            "code": "def time_groupby_first_datetimes(self):\n    self.df.groupby('b').first()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_datetimes.time_groupby_first_datetimes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_datetimes.time_groupby_last_datetimes": {
            "code": "def time_groupby_last_datetimes(self):\n    self.df.groupby('b').last()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_datetimes.time_groupby_last_datetimes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_datetimes.time_groupby_nth_datetimes_any": {
            "code": "def time_groupby_nth_datetimes_any(self):\n    self.df.groupby('b').nth(0, dropna='all')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_datetimes.time_groupby_nth_datetimes_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_datetimes.time_groupby_nth_datetimes_none": {
            "code": "def time_groupby_nth_datetimes_none(self):\n    self.df.groupby('b').nth(0)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_datetimes.time_groupby_nth_datetimes_none", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_object.time_groupby_first_object": {
            "code": "def time_groupby_first_object(self):\n    self.df.groupby('b').first()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_object.time_groupby_first_object", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_object.time_groupby_last_object": {
            "code": "def time_groupby_last_object(self):\n    self.df.groupby('b').last()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_object.time_groupby_last_object", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_object.time_groupby_nth_object_any": {
            "code": "def time_groupby_nth_object_any(self):\n    self.df.groupby('b').nth(0, dropna='any')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_object.time_groupby_nth_object_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_first_last_object.time_groupby_nth_object_none": {
            "code": "def time_groupby_nth_object_none(self):\n    self.df.groupby('b').nth(0)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_first_last_object.time_groupby_nth_object_none", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_frame.time_groupby_frame_median": {
            "code": "def time_groupby_frame_median(self):\n    self.df.groupby(self.labels).median()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_frame.time_groupby_frame_median", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_frame.time_groupby_simple_compress_timing": {
            "code": "def time_groupby_simple_compress_timing(self):\n    self.df.groupby(self.labels).mean()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_frame.time_groupby_simple_compress_timing", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_frame_apply.time_groupby_frame_apply": {
            "code": "def time_groupby_frame_apply(self):\n    self.df.groupby(['key', 'key2']).apply(self.f)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_frame_apply.time_groupby_frame_apply", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_frame_apply.time_groupby_frame_apply_overhead": {
            "code": "def time_groupby_frame_apply_overhead(self):\n    self.df.groupby('key').apply(self.f)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_frame_apply.time_groupby_frame_apply_overhead", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_frame_cython_many_columns.time_sum": {
            "code": "def time_sum(self):\n    self.df.groupby(self.labels).sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_frame_cython_many_columns.time_sum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_frame_singlekey_integer.time_sum": {
            "code": "def time_sum(self):\n    self.df.groupby(self.labels).sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_frame_singlekey_integer.time_sum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_indices.time_groupby_indices": {
            "code": "def time_groupby_indices(self):\n    len(self.ts.groupby([self.year, self.month, self.day]))\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_indices.time_groupby_indices", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_int64_overflow.time_groupby_int64_overflow": {
            "code": "def time_groupby_int64_overflow(self):\n    self.df.groupby(list('abcde')).max()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_int64_overflow.time_groupby_int64_overflow", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_int_count.time_groupby_int_count": {
            "code": "def time_groupby_int_count(self):\n    self.df.groupby(['key1', 'key2']).count()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_int_count.time_groupby_int_count", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_multi.time_groupby_multi_cython": {
            "code": "def time_groupby_multi_cython(self):\n    self.df.groupby(['key1', 'key2']).sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_multi.time_groupby_multi_cython", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_multi.time_groupby_multi_python": {
            "code": "def time_groupby_multi_python(self):\n    self.df.groupby(['key1', 'key2'])['data1'].agg((lambda x: x.values.sum()))\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_multi.time_groupby_multi_python", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_multi.time_groupby_multi_series_op": {
            "code": "def time_groupby_multi_series_op(self):\n    self.df.groupby(['key1', 'key2'])['data1'].agg(np.std)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_multi.time_groupby_multi_series_op", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_multi.time_groupby_series_simple_cython": {
            "code": "def time_groupby_series_simple_cython(self):\n    self.simple_series.groupby(self.key1).sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_multi.time_groupby_series_simple_cython", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_multi.time_groupby_series_simple_rank": {
            "code": "def time_groupby_series_simple_rank(self):\n    self.df.groupby('key1').rank(pct=True)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_multi.time_groupby_series_simple_rank", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_multi_count.time_groupby_multi_count": {
            "code": "def time_groupby_multi_count(self):\n    self.df.groupby(['key1', 'key2']).count()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_multi_count.time_groupby_multi_count", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_multi_index.time_groupby_multi_index": {
            "code": "def time_groupby_multi_index(self):\n    self.df.groupby(list('abcd')).max()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_multi_index.time_groupby_multi_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_all": {
            "code": "def time_all(self):\n    self.df.groupby('value')['timestamp'].all()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_all", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_any": {
            "code": "def time_any(self):\n    self.df.groupby('value')['timestamp'].any()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_count": {
            "code": "def time_count(self):\n    self.df.groupby('value')['timestamp'].count()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_count", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_cumcount": {
            "code": "def time_cumcount(self):\n    self.df.groupby('value')['timestamp'].cumcount()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_cumcount", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_cummax": {
            "code": "def time_cummax(self):\n    self.df.groupby('value')['timestamp'].cummax()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_cummax", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_cummin": {
            "code": "def time_cummin(self):\n    self.df.groupby('value')['timestamp'].cummin()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_cummin", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_cumprod": {
            "code": "def time_cumprod(self):\n    self.df.groupby('value')['timestamp'].cumprod()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_cumprod", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_cumsum": {
            "code": "def time_cumsum(self):\n    self.df.groupby('value')['timestamp'].cumsum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_cumsum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_describe": {
            "code": "def time_describe(self):\n    self.df.groupby('value')['timestamp'].describe()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_describe", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_diff": {
            "code": "def time_diff(self):\n    self.df.groupby('value')['timestamp'].diff()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_diff", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_first": {
            "code": "def time_first(self):\n    self.df.groupby('value')['timestamp'].first()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_first", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_head": {
            "code": "def time_head(self):\n    self.df.groupby('value')['timestamp'].head()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_head", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_last": {
            "code": "def time_last(self):\n    self.df.groupby('value')['timestamp'].last()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_last", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_mad": {
            "code": "def time_mad(self):\n    self.df.groupby('value')['timestamp'].mad()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_mad", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_max": {
            "code": "def time_max(self):\n    self.df.groupby('value')['timestamp'].max()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_max", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_mean": {
            "code": "def time_mean(self):\n    self.df.groupby('value')['timestamp'].mean()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_median": {
            "code": "def time_median(self):\n    self.df.groupby('value')['timestamp'].median()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_median", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_min": {
            "code": "def time_min(self):\n    self.df.groupby('value')['timestamp'].min()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_min", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_nunique": {
            "code": "def time_nunique(self):\n    self.df.groupby('value')['timestamp'].nunique()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_nunique", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_pct_change": {
            "code": "def time_pct_change(self):\n    self.df.groupby('value')['timestamp'].pct_change()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_pct_change", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_prod": {
            "code": "def time_prod(self):\n    self.df.groupby('value')['timestamp'].prod()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_prod", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_rank": {
            "code": "def time_rank(self):\n    self.df.groupby('value')['timestamp'].rank()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_rank", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_sem": {
            "code": "def time_sem(self):\n    self.df.groupby('value')['timestamp'].sem()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_sem", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_size": {
            "code": "def time_size(self):\n    self.df.groupby('value')['timestamp'].size()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_size", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_skew": {
            "code": "def time_skew(self):\n    self.df.groupby('value')['timestamp'].skew()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_skew", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_std": {
            "code": "def time_std(self):\n    self.df.groupby('value')['timestamp'].std()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_std", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_sum": {
            "code": "def time_sum(self):\n    self.df.groupby('value')['timestamp'].sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_sum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_tail": {
            "code": "def time_tail(self):\n    self.df.groupby('value')['timestamp'].tail()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_tail", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_unique": {
            "code": "def time_unique(self):\n    self.df.groupby('value')['timestamp'].unique()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_unique", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_value_counts": {
            "code": "def time_value_counts(self):\n    self.df.groupby('value')['timestamp'].value_counts()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_value_counts", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_100.time_var": {
            "code": "def time_var(self):\n    self.df.groupby('value')['timestamp'].var()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_100.time_var", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_all": {
            "code": "def time_all(self):\n    self.df.groupby('value')['timestamp'].all()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_all", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_any": {
            "code": "def time_any(self):\n    self.df.groupby('value')['timestamp'].any()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_count": {
            "code": "def time_count(self):\n    self.df.groupby('value')['timestamp'].count()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_count", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_cumcount": {
            "code": "def time_cumcount(self):\n    self.df.groupby('value')['timestamp'].cumcount()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_cumcount", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_cummax": {
            "code": "def time_cummax(self):\n    self.df.groupby('value')['timestamp'].cummax()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_cummax", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_cummin": {
            "code": "def time_cummin(self):\n    self.df.groupby('value')['timestamp'].cummin()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_cummin", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_cumprod": {
            "code": "def time_cumprod(self):\n    self.df.groupby('value')['timestamp'].cumprod()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_cumprod", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_cumsum": {
            "code": "def time_cumsum(self):\n    self.df.groupby('value')['timestamp'].cumsum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_cumsum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_describe": {
            "code": "def time_describe(self):\n    self.df.groupby('value')['timestamp'].describe()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_describe", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_diff": {
            "code": "def time_diff(self):\n    self.df.groupby('value')['timestamp'].diff()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_diff", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_first": {
            "code": "def time_first(self):\n    self.df.groupby('value')['timestamp'].first()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_first", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_head": {
            "code": "def time_head(self):\n    self.df.groupby('value')['timestamp'].head()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_head", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_last": {
            "code": "def time_last(self):\n    self.df.groupby('value')['timestamp'].last()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_last", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_mad": {
            "code": "def time_mad(self):\n    self.df.groupby('value')['timestamp'].mad()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_mad", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_max": {
            "code": "def time_max(self):\n    self.df.groupby('value')['timestamp'].max()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_max", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_mean": {
            "code": "def time_mean(self):\n    self.df.groupby('value')['timestamp'].mean()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_median": {
            "code": "def time_median(self):\n    self.df.groupby('value')['timestamp'].median()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_median", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_min": {
            "code": "def time_min(self):\n    self.df.groupby('value')['timestamp'].min()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_min", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_nunique": {
            "code": "def time_nunique(self):\n    self.df.groupby('value')['timestamp'].nunique()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_nunique", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_pct_change": {
            "code": "def time_pct_change(self):\n    self.df.groupby('value')['timestamp'].pct_change()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_pct_change", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_prod": {
            "code": "def time_prod(self):\n    self.df.groupby('value')['timestamp'].prod()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_prod", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_rank": {
            "code": "def time_rank(self):\n    self.df.groupby('value')['timestamp'].rank()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_rank", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_sem": {
            "code": "def time_sem(self):\n    self.df.groupby('value')['timestamp'].sem()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_sem", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_size": {
            "code": "def time_size(self):\n    self.df.groupby('value')['timestamp'].size()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_size", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_skew": {
            "code": "def time_skew(self):\n    self.df.groupby('value')['timestamp'].skew()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_skew", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_std": {
            "code": "def time_std(self):\n    self.df.groupby('value')['timestamp'].std()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_std", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_sum": {
            "code": "def time_sum(self):\n    self.df.groupby('value')['timestamp'].sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_sum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_tail": {
            "code": "def time_tail(self):\n    self.df.groupby('value')['timestamp'].tail()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_tail", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_unique": {
            "code": "def time_unique(self):\n    self.df.groupby('value')['timestamp'].unique()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_unique", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_value_counts": {
            "code": "def time_value_counts(self):\n    self.df.groupby('value')['timestamp'].value_counts()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_value_counts", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_ngroups_10000.time_var": {
            "code": "def time_var(self):\n    self.df.groupby('value')['timestamp'].var()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_ngroups_10000.time_var", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_nth.time_groupby_frame_nth_any": {
            "code": "def time_groupby_frame_nth_any(self):\n    self.df.groupby(0).nth(0, dropna='any')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_nth.time_groupby_frame_nth_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_nth.time_groupby_frame_nth_none": {
            "code": "def time_groupby_frame_nth_none(self):\n    self.df.groupby(0).nth(0)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_nth.time_groupby_frame_nth_none", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_nth.time_groupby_series_nth_any": {
            "code": "def time_groupby_series_nth_any(self):\n    self.df[1].groupby(self.df[0]).nth(0, dropna='any')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_nth.time_groupby_series_nth_any", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_nth.time_groupby_series_nth_none": {
            "code": "def time_groupby_series_nth_none(self):\n    self.df[1].groupby(self.df[0]).nth(0)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_nth.time_groupby_series_nth_none", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_pivot_table.time_groupby_pivot_table": {
            "code": "def time_groupby_pivot_table(self):\n    self.df.pivot_table(index='key1', columns=['key2', 'key3'])\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_pivot_table.time_groupby_pivot_table", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_size.time_groupby_dt_size": {
            "code": "def time_groupby_dt_size(self):\n    self.df.groupby(['dates']).size()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_size.time_groupby_dt_size", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_size.time_groupby_dt_timegrouper_size": {
            "code": "def time_groupby_dt_timegrouper_size(self):\n    self.df.groupby(TimeGrouper(key='dates', freq='M')).size()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_size.time_groupby_dt_timegrouper_size", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_size.time_groupby_multi_size": {
            "code": "def time_groupby_multi_size(self):\n    self.df.groupby(['key1', 'key2']).size()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_size.time_groupby_multi_size", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_sum_booleans.time_groupby_sum_booleans": {
            "code": "def time_groupby_sum_booleans(self):\n    self.df.groupby('ii').sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_sum_booleans.time_groupby_sum_booleans", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_sum_multiindex.time_groupby_sum_multiindex": {
            "code": "def time_groupby_sum_multiindex(self):\n    self.df.groupby(level=[0, 1]).sum()\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_sum_multiindex.time_groupby_sum_multiindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform.time_groupby_transform": {
            "code": "def time_groupby_transform(self):\n    self.data.groupby(level='security_id').transform(self.f_fillna)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform.time_groupby_transform", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform.time_groupby_transform_ufunc": {
            "code": "def time_groupby_transform_ufunc(self):\n    self.data.groupby(level='date').transform(np.max)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform.time_groupby_transform_ufunc", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform_multi_key.time_groupby_transform_multi_key1": {
            "code": "def time_groupby_transform_multi_key1(self):\n    self.df.groupby(['jim', 'joe'])['jolie'].transform('max')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform_multi_key.time_groupby_transform_multi_key1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform_multi_key2.time_groupby_transform_multi_key2": {
            "code": "def time_groupby_transform_multi_key2(self):\n    self.df.groupby(['jim', 'joe'])['jolie'].transform('max')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform_multi_key2.time_groupby_transform_multi_key2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform_multi_key3.time_groupby_transform_multi_key3": {
            "code": "def time_groupby_transform_multi_key3(self):\n    self.df.groupby(['jim', 'joe'])['jolie'].transform('max')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform_multi_key3.time_groupby_transform_multi_key3", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform_multi_key4.time_groupby_transform_multi_key4": {
            "code": "def time_groupby_transform_multi_key4(self):\n    self.df.groupby(['jim', 'joe'])['jolie'].transform('max')\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform_multi_key4.time_groupby_transform_multi_key4", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform_series.time_groupby_transform_series": {
            "code": "def time_groupby_transform_series(self):\n    self.df['signal'].groupby(self.g).transform(np.mean)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform_series.time_groupby_transform_series", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.groupby_transform_series2.time_groupby_transform_series2": {
            "code": "def time_groupby_transform_series2(self):\n    self.df.groupby('id')['val'].transform(np.mean)\n", 
            "goal_time": 0.2, 
            "name": "groupby.groupby_transform_series2.time_groupby_transform_series2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.series_value_counts.time_value_counts_float64": {
            "code": "def time_value_counts_float64(self):\n    self.s2.value_counts()\n", 
            "goal_time": 0.2, 
            "name": "groupby.series_value_counts.time_value_counts_float64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.series_value_counts.time_value_counts_int64": {
            "code": "def time_value_counts_int64(self):\n    self.s.value_counts()\n", 
            "goal_time": 0.2, 
            "name": "groupby.series_value_counts.time_value_counts_int64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "groupby.series_value_counts.time_value_counts_strings": {
            "code": "def time_value_counts_strings(self):\n    self.s.value_counts()\n", 
            "goal_time": 0.2, 
            "name": "groupby.series_value_counts.time_value_counts_strings", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.query_store_table.time_query_store_table": {
            "code": "def time_query_store_table(self):\n    self.store.select('df12', [('index', '>', self.df.index[10000]), ('index', '<', self.df.index[15000])])\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.query_store_table.time_query_store_table", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.query_store_table_wide.time_query_store_table_wide": {
            "code": "def time_query_store_table_wide(self):\n    self.store.select('df11', [('index', '>', self.df.index[10000]), ('index', '<', self.df.index[15000])])\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.query_store_table_wide.time_query_store_table_wide", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.read_store.time_read_store": {
            "code": "def time_read_store(self):\n    self.store.get('df1')\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.read_store.time_read_store", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.read_store_mixed.time_read_store_mixed": {
            "code": "def time_read_store_mixed(self):\n    self.store.get('df3')\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.read_store_mixed.time_read_store_mixed", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.read_store_table.time_read_store_table": {
            "code": "def time_read_store_table(self):\n    self.store.select('df7')\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.read_store_table.time_read_store_table", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.read_store_table_mixed.time_read_store_table_mixed": {
            "code": "def time_read_store_table_mixed(self):\n    self.store.select('df5')\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.read_store_table_mixed.time_read_store_table_mixed", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.read_store_table_panel.time_read_store_table_panel": {
            "code": "def time_read_store_table_panel(self):\n    self.store.select('p1')\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.read_store_table_panel.time_read_store_table_panel", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.read_store_table_wide.time_read_store_table_wide": {
            "code": "def time_read_store_table_wide(self):\n    self.store.select('df9')\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.read_store_table_wide.time_read_store_table_wide", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.write_store.time_write_store": {
            "code": "def time_write_store(self):\n    self.store.put('df2', self.df)\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.write_store.time_write_store", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.write_store_mixed.time_write_store_mixed": {
            "code": "def time_write_store_mixed(self):\n    self.store.put('df4', self.df)\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.write_store_mixed.time_write_store_mixed", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.write_store_table.time_write_store_table": {
            "code": "def time_write_store_table(self):\n    self.store.append('df8', self.df)\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.write_store_table.time_write_store_table", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.write_store_table_dc.time_write_store_table_dc": {
            "code": "def time_write_store_table_dc(self):\n    self.store.append('df15', self.df, data_columns=True)\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.write_store_table_dc.time_write_store_table_dc", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.write_store_table_mixed.time_write_store_table_mixed": {
            "code": "def time_write_store_table_mixed(self):\n    self.store.append('df6', self.df)\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.write_store_table_mixed.time_write_store_table_mixed", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.write_store_table_panel.time_write_store_table_panel": {
            "code": "def time_write_store_table_panel(self):\n    self.store.append('p2', self.p)\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.write_store_table_panel.time_write_store_table_panel", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "hdfstore_bench.write_store_table_wide.time_write_store_table_wide": {
            "code": "def time_write_store_table_wide(self):\n    self.store.append('df10', self.df)\n", 
            "goal_time": 0.2, 
            "name": "hdfstore_bench.write_store_table_wide.time_write_store_table_wide", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.datetime_index_intersection.time_datetime_index_intersection": {
            "code": "def time_datetime_index_intersection(self):\n    self.rng.intersection(self.rng2)\n", 
            "goal_time": 0.2, 
            "name": "index_object.datetime_index_intersection.time_datetime_index_intersection", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.datetime_index_repr.time_datetime_index_repr": {
            "code": "def time_datetime_index_repr(self):\n    self.dr._is_dates_only\n", 
            "goal_time": 0.2, 
            "name": "index_object.datetime_index_repr.time_datetime_index_repr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.datetime_index_union.time_datetime_index_union": {
            "code": "def time_datetime_index_union(self):\n    self.rng.union(self.rng2)\n", 
            "goal_time": 0.2, 
            "name": "index_object.datetime_index_union.time_datetime_index_union", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_datetime_intersection.time_index_datetime_intersection": {
            "code": "def time_index_datetime_intersection(self):\n    self.rng.intersection(self.rng2)\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_datetime_intersection.time_index_datetime_intersection", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_datetime_union.time_index_datetime_union": {
            "code": "def time_index_datetime_union(self):\n    self.rng.union(self.rng2)\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_datetime_union.time_index_datetime_union", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_boolean_indexer.time_index_float64_boolean_indexer": {
            "code": "def time_index_float64_boolean_indexer(self):\n    self.idx[self.mask]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_boolean_indexer.time_index_float64_boolean_indexer", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_boolean_series_indexer.time_index_float64_boolean_series_indexer": {
            "code": "def time_index_float64_boolean_series_indexer(self):\n    self.idx[self.series_mask]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_boolean_series_indexer.time_index_float64_boolean_series_indexer", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_construct.time_index_float64_construct": {
            "code": "def time_index_float64_construct(self):\n    Index(self.baseidx)\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_construct.time_index_float64_construct", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_div.time_index_float64_div": {
            "code": "def time_index_float64_div(self):\n    (self.idx / 2)\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_div.time_index_float64_div", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_get.time_index_float64_get": {
            "code": "def time_index_float64_get(self):\n    self.idx[1]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_get.time_index_float64_get", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_mul.time_index_float64_mul": {
            "code": "def time_index_float64_mul(self):\n    (self.idx * 2)\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_mul.time_index_float64_mul", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_slice_indexer_basic.time_index_float64_slice_indexer_basic": {
            "code": "def time_index_float64_slice_indexer_basic(self):\n    self.idx[:(-1)]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_slice_indexer_basic.time_index_float64_slice_indexer_basic", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_float64_slice_indexer_even.time_index_float64_slice_indexer_even": {
            "code": "def time_index_float64_slice_indexer_even(self):\n    self.idx[::2]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_float64_slice_indexer_even.time_index_float64_slice_indexer_even", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_int64_intersection.time_index_int64_intersection": {
            "code": "def time_index_int64_intersection(self):\n    self.left.intersection(self.right)\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_int64_intersection.time_index_int64_intersection", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_int64_union.time_index_int64_union": {
            "code": "def time_index_int64_union(self):\n    self.left.union(self.right)\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_int64_union.time_index_int64_union", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_str_boolean_indexer.time_index_str_boolean_indexer": {
            "code": "def time_index_str_boolean_indexer(self):\n    self.idx[self.mask]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_str_boolean_indexer.time_index_str_boolean_indexer", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_str_boolean_series_indexer.time_index_str_boolean_series_indexer": {
            "code": "def time_index_str_boolean_series_indexer(self):\n    self.idx[self.series_mask]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_str_boolean_series_indexer.time_index_str_boolean_series_indexer", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_str_slice_indexer_basic.time_index_str_slice_indexer_basic": {
            "code": "def time_index_str_slice_indexer_basic(self):\n    self.idx[:(-1)]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_str_slice_indexer_basic.time_index_str_slice_indexer_basic", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.index_str_slice_indexer_even.time_index_str_slice_indexer_even": {
            "code": "def time_index_str_slice_indexer_even(self):\n    self.idx[::2]\n", 
            "goal_time": 0.2, 
            "name": "index_object.index_str_slice_indexer_even.time_index_str_slice_indexer_even", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.multiindex_duplicated.time_multiindex_duplicated": {
            "code": "def time_multiindex_duplicated(self):\n    self.mi.duplicated()\n", 
            "goal_time": 0.2, 
            "name": "index_object.multiindex_duplicated.time_multiindex_duplicated", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.multiindex_from_product.time_multiindex_from_product": {
            "code": "def time_multiindex_from_product(self):\n    MultiIndex.from_product(self.iterables)\n", 
            "goal_time": 0.2, 
            "name": "index_object.multiindex_from_product.time_multiindex_from_product", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.multiindex_sortlevel_int64.time_multiindex_sortlevel_int64": {
            "code": "def time_multiindex_sortlevel_int64(self):\n    self.mi.sortlevel()\n", 
            "goal_time": 0.2, 
            "name": "index_object.multiindex_sortlevel_int64.time_multiindex_sortlevel_int64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.multiindex_with_datetime_level_full.time_multiindex_with_datetime_level_full": {
            "code": "def time_multiindex_with_datetime_level_full(self):\n    self.mi.copy().values\n", 
            "goal_time": 0.2, 
            "name": "index_object.multiindex_with_datetime_level_full.time_multiindex_with_datetime_level_full", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "index_object.multiindex_with_datetime_level_sliced.time_multiindex_with_datetime_level_sliced": {
            "code": "def time_multiindex_with_datetime_level_sliced(self):\n    self.mi[:10].values\n", 
            "goal_time": 0.2, 
            "name": "index_object.multiindex_with_datetime_level_sliced.time_multiindex_with_datetime_level_sliced", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.dataframe_getitem_scalar.time_dataframe_getitem_scalar": {
            "code": "def time_dataframe_getitem_scalar(self):\n    self.df[self.col][self.idx]\n", 
            "goal_time": 0.2, 
            "name": "indexing.dataframe_getitem_scalar.time_dataframe_getitem_scalar", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.datamatrix_getitem_scalar.time_datamatrix_getitem_scalar": {
            "code": "def time_datamatrix_getitem_scalar(self):\n    self.df[self.col][self.idx]\n", 
            "goal_time": 0.2, 
            "name": "indexing.datamatrix_getitem_scalar.time_datamatrix_getitem_scalar", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.frame_iloc_big.time_frame_iloc_big": {
            "code": "def time_frame_iloc_big(self):\n    self.df.iloc[:100, 0]\n", 
            "goal_time": 0.2, 
            "name": "indexing.frame_iloc_big.time_frame_iloc_big", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.frame_iloc_dups.time_frame_iloc_dups": {
            "code": "def time_frame_iloc_dups(self):\n    self.df2.iloc[self.idx]\n", 
            "goal_time": 0.2, 
            "name": "indexing.frame_iloc_dups.time_frame_iloc_dups", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.frame_loc_dups.time_frame_loc_dups": {
            "code": "def time_frame_loc_dups(self):\n    self.df2.loc[self.idx]\n", 
            "goal_time": 0.2, 
            "name": "indexing.frame_loc_dups.time_frame_loc_dups", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.frame_xs_mi_ix.time_frame_xs_mi_ix": {
            "code": "def time_frame_xs_mi_ix(self):\n    self.df.ix[999]\n", 
            "goal_time": 0.2, 
            "name": "indexing.frame_xs_mi_ix.time_frame_xs_mi_ix", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_dataframe_boolean.time_indexing_dataframe_boolean": {
            "code": "def time_indexing_dataframe_boolean(self):\n    (self.df > self.df2)\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_dataframe_boolean.time_indexing_dataframe_boolean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_dataframe_boolean_no_ne.time_indexing_dataframe_boolean_no_ne": {
            "code": "def time_indexing_dataframe_boolean_no_ne(self):\n    (self.df > self.df2)\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_dataframe_boolean_no_ne.time_indexing_dataframe_boolean_no_ne", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_dataframe_boolean_rows.time_indexing_dataframe_boolean_rows": {
            "code": "def time_indexing_dataframe_boolean_rows(self):\n    self.df[self.indexer]\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_dataframe_boolean_rows.time_indexing_dataframe_boolean_rows", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_dataframe_boolean_rows_object.time_indexing_dataframe_boolean_rows_object": {
            "code": "def time_indexing_dataframe_boolean_rows_object(self):\n    self.df[self.obj_indexer]\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_dataframe_boolean_rows_object.time_indexing_dataframe_boolean_rows_object", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_dataframe_boolean_st.time_indexing_dataframe_boolean_st": {
            "code": "def time_indexing_dataframe_boolean_st(self):\n    (self.df > self.df2)\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_dataframe_boolean_st.time_indexing_dataframe_boolean_st", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_frame_get_value.time_indexing_frame_get_value": {
            "code": "def time_indexing_frame_get_value(self):\n    self.df.get_value(self.idx, self.col)\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_frame_get_value.time_indexing_frame_get_value", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_frame_get_value_ix.time_indexing_frame_get_value_ix": {
            "code": "def time_indexing_frame_get_value_ix(self):\n    self.df.ix[(self.idx, self.col)]\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_frame_get_value_ix.time_indexing_frame_get_value_ix", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.indexing_panel_subset.time_indexing_panel_subset": {
            "code": "def time_indexing_panel_subset(self):\n    self.p.ix[(self.inds, self.inds, self.inds)]\n", 
            "goal_time": 0.2, 
            "name": "indexing.indexing_panel_subset.time_indexing_panel_subset", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.multiindex_slicers.time_multiindex_slicers": {
            "code": "def time_multiindex_slicers(self):\n    self.mdt2.loc[self.idx[(self.test_A - self.eps_A):(self.test_A + self.eps_A), (self.test_B - self.eps_B):(self.test_B + self.eps_B), (self.test_C - self.eps_C):(self.test_C + self.eps_C), (self.test_D - self.eps_D):(self.test_D + self.eps_D)], :]\n", 
            "goal_time": 0.2, 
            "name": "indexing.multiindex_slicers.time_multiindex_slicers", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_get_value.time_series_get_value": {
            "code": "def time_series_get_value(self):\n    self.s.get_value(self.idx)\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_get_value.time_series_get_value", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_getitem_array.time_series_getitem_array": {
            "code": "def time_series_getitem_array(self):\n    self.s[np.arange(10000)]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_getitem_array.time_series_getitem_array", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_getitem_label_slice.time_series_getitem_label_slice": {
            "code": "def time_series_getitem_label_slice(self):\n    self.s[:self.lbl]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_getitem_label_slice.time_series_getitem_label_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_getitem_list_like.time_series_getitem_list_like": {
            "code": "def time_series_getitem_list_like(self):\n    self.s[[800000]]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_getitem_list_like.time_series_getitem_list_like", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_getitem_pos_slice.time_series_getitem_pos_slice": {
            "code": "def time_series_getitem_pos_slice(self):\n    self.s[:800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_getitem_pos_slice.time_series_getitem_pos_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_getitem_scalar.time_series_getitem_scalar": {
            "code": "def time_series_getitem_scalar(self):\n    self.s[800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_getitem_scalar.time_series_getitem_scalar", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_getitem_slice.time_series_getitem_slice": {
            "code": "def time_series_getitem_slice(self):\n    self.s[:800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_getitem_slice.time_series_getitem_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_iloc_array.time_series_iloc_array": {
            "code": "def time_series_iloc_array(self):\n    self.s.iloc[np.arange(10000)]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_iloc_array.time_series_iloc_array", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_iloc_list_like.time_series_iloc_list_like": {
            "code": "def time_series_iloc_list_like(self):\n    self.s.iloc[[800000]]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_iloc_list_like.time_series_iloc_list_like", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_iloc_scalar.time_series_iloc_scalar": {
            "code": "def time_series_iloc_scalar(self):\n    self.s.iloc[800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_iloc_scalar.time_series_iloc_scalar", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_iloc_slice.time_series_iloc_slice": {
            "code": "def time_series_iloc_slice(self):\n    self.s.iloc[:800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_iloc_slice.time_series_iloc_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_ix_array.time_series_ix_array": {
            "code": "def time_series_ix_array(self):\n    self.s.ix[np.arange(10000)]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_ix_array.time_series_ix_array", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_ix_list_like.time_series_ix_list_like": {
            "code": "def time_series_ix_list_like(self):\n    self.s.ix[[800000]]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_ix_list_like.time_series_ix_list_like", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_ix_scalar.time_series_ix_scalar": {
            "code": "def time_series_ix_scalar(self):\n    self.s.ix[800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_ix_scalar.time_series_ix_scalar", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_ix_slice.time_series_ix_slice": {
            "code": "def time_series_ix_slice(self):\n    self.s.ix[:800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_ix_slice.time_series_ix_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_loc_array.time_series_loc_array": {
            "code": "def time_series_loc_array(self):\n    self.s.loc[np.arange(10000)]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_loc_array.time_series_loc_array", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_loc_list_like.time_series_loc_list_like": {
            "code": "def time_series_loc_list_like(self):\n    self.s.loc[[800000]]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_loc_list_like.time_series_loc_list_like", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_loc_scalar.time_series_loc_scalar": {
            "code": "def time_series_loc_scalar(self):\n    self.s.loc[800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_loc_scalar.time_series_loc_scalar", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_loc_slice.time_series_loc_slice": {
            "code": "def time_series_loc_slice(self):\n    self.s.loc[:800000]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_loc_slice.time_series_loc_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_take_dtindex.time_series_take_dtindex": {
            "code": "def time_series_take_dtindex(self):\n    self.ts.take(self.indexer)\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_take_dtindex.time_series_take_dtindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_take_intindex.time_series_take_intindex": {
            "code": "def time_series_take_intindex(self):\n    self.s.take(self.indexer)\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_take_intindex.time_series_take_intindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.series_xs_mi_ix.time_series_xs_mi_ix": {
            "code": "def time_series_xs_mi_ix(self):\n    self.s.ix[999]\n", 
            "goal_time": 0.2, 
            "name": "indexing.series_xs_mi_ix.time_series_xs_mi_ix", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.sort_level_one.time_sort_level_one": {
            "code": "def time_sort_level_one(self):\n    self.midx.sortlevel(1)\n", 
            "goal_time": 0.2, 
            "name": "indexing.sort_level_one.time_sort_level_one", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.sort_level_zero.time_sort_level_zero": {
            "code": "def time_sort_level_zero(self):\n    self.midx.sortlevel(0)\n", 
            "goal_time": 0.2, 
            "name": "indexing.sort_level_zero.time_sort_level_zero", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "indexing.time_series_getitem_scalar.time_time_series_getitem_scalar": {
            "code": "def time_time_series_getitem_scalar(self):\n    self.ts[self.dt]\n", 
            "goal_time": 0.2, 
            "name": "indexing.time_series_getitem_scalar.time_time_series_getitem_scalar", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_datetime64.time_dtype_infer_datetime64": {
            "code": "def time_dtype_infer_datetime64(self):\n    (self.df_datetime64['A'] - self.df_datetime64['B'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_datetime64.time_dtype_infer_datetime64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_float32.time_dtype_infer_float32": {
            "code": "def time_dtype_infer_float32(self):\n    (self.df_float32['A'] + self.df_float32['B'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_float32.time_dtype_infer_float32", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_float64.time_dtype_infer_float64": {
            "code": "def time_dtype_infer_float64(self):\n    (self.df_float64['A'] + self.df_float64['B'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_float64.time_dtype_infer_float64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_int32.time_dtype_infer_int32": {
            "code": "def time_dtype_infer_int32(self):\n    (self.df_int32['A'] + self.df_int32['B'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_int32.time_dtype_infer_int32", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_int64.time_dtype_infer_int64": {
            "code": "def time_dtype_infer_int64(self):\n    (self.df_int64['A'] + self.df_int64['B'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_int64.time_dtype_infer_int64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_timedelta64_1.time_dtype_infer_timedelta64_1": {
            "code": "def time_dtype_infer_timedelta64_1(self):\n    (self.df_timedelta64['A'] + self.df_timedelta64['B'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_timedelta64_1.time_dtype_infer_timedelta64_1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_timedelta64_2.time_dtype_infer_timedelta64_2": {
            "code": "def time_dtype_infer_timedelta64_2(self):\n    (self.df_timedelta64['A'] + self.df_timedelta64['A'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_timedelta64_2.time_dtype_infer_timedelta64_2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "inference.dtype_infer_uint32.time_dtype_infer_uint32": {
            "code": "def time_dtype_infer_uint32(self):\n    (self.df_uint32['A'] + self.df_uint32['B'])\n", 
            "goal_time": 0.2, 
            "name": "inference.dtype_infer_uint32.time_dtype_infer_uint32", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.frame_to_csv.time_frame_to_csv": {
            "code": "def time_frame_to_csv(self):\n    self.df.to_csv('__test__.csv')\n", 
            "goal_time": 0.2, 
            "name": "io_bench.frame_to_csv.time_frame_to_csv", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.frame_to_csv2.time_frame_to_csv2": {
            "code": "def time_frame_to_csv2(self):\n    self.df.to_csv('__test__.csv')\n", 
            "goal_time": 0.2, 
            "name": "io_bench.frame_to_csv2.time_frame_to_csv2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.frame_to_csv_date_formatting.time_frame_to_csv_date_formatting": {
            "code": "def time_frame_to_csv_date_formatting(self):\n    self.data.to_csv('__test__.csv', date_format='%Y%m%d')\n", 
            "goal_time": 0.2, 
            "name": "io_bench.frame_to_csv_date_formatting.time_frame_to_csv_date_formatting", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.frame_to_csv_mixed.time_frame_to_csv_mixed": {
            "code": "def time_frame_to_csv_mixed(self):\n    self.df.to_csv('__test__.csv')\n", 
            "goal_time": 0.2, 
            "name": "io_bench.frame_to_csv_mixed.time_frame_to_csv_mixed", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.read_csv_infer_datetime_format_custom.time_read_csv_infer_datetime_format_custom": {
            "code": "def time_read_csv_infer_datetime_format_custom(self):\n    read_csv(StringIO(self.data), header=None, names=['foo'], parse_dates=['foo'], infer_datetime_format=True)\n", 
            "goal_time": 0.2, 
            "name": "io_bench.read_csv_infer_datetime_format_custom.time_read_csv_infer_datetime_format_custom", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.read_csv_infer_datetime_format_iso8601.time_read_csv_infer_datetime_format_iso8601": {
            "code": "def time_read_csv_infer_datetime_format_iso8601(self):\n    read_csv(StringIO(self.data), header=None, names=['foo'], parse_dates=['foo'], infer_datetime_format=True)\n", 
            "goal_time": 0.2, 
            "name": "io_bench.read_csv_infer_datetime_format_iso8601.time_read_csv_infer_datetime_format_iso8601", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.read_csv_infer_datetime_format_ymd.time_read_csv_infer_datetime_format_ymd": {
            "code": "def time_read_csv_infer_datetime_format_ymd(self):\n    read_csv(StringIO(self.data), header=None, names=['foo'], parse_dates=['foo'], infer_datetime_format=True)\n", 
            "goal_time": 0.2, 
            "name": "io_bench.read_csv_infer_datetime_format_ymd.time_read_csv_infer_datetime_format_ymd", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.read_csv_skiprows.time_read_csv_skiprows": {
            "code": "def time_read_csv_skiprows(self):\n    read_csv('__test__.csv', skiprows=10000)\n", 
            "goal_time": 0.2, 
            "name": "io_bench.read_csv_skiprows.time_read_csv_skiprows", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.read_csv_standard.time_read_csv_standard": {
            "code": "def time_read_csv_standard(self):\n    read_csv('__test__.csv')\n", 
            "goal_time": 0.2, 
            "name": "io_bench.read_csv_standard.time_read_csv_standard", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.read_parse_dates_iso8601.time_read_parse_dates_iso8601": {
            "code": "def time_read_parse_dates_iso8601(self):\n    read_csv(StringIO(self.data), header=None, names=['foo'], parse_dates=['foo'])\n", 
            "goal_time": 0.2, 
            "name": "io_bench.read_parse_dates_iso8601.time_read_parse_dates_iso8601", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_bench.write_csv_standard.time_write_csv_standard": {
            "code": "def time_write_csv_standard(self):\n    self.df.to_csv('__test__.csv')\n", 
            "goal_time": 0.2, 
            "name": "io_bench.write_csv_standard.time_write_csv_standard", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_datetime_read_and_parse_sqlalchemy.time_sql_datetime_read_and_parse_sqlalchemy": {
            "code": "def time_sql_datetime_read_and_parse_sqlalchemy(self):\n    read_sql_table('test_type', self.engine, columns=['datetime_string'], parse_dates=['datetime_string'])\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_datetime_read_and_parse_sqlalchemy.time_sql_datetime_read_and_parse_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_datetime_read_as_native_sqlalchemy.time_sql_datetime_read_as_native_sqlalchemy": {
            "code": "def time_sql_datetime_read_as_native_sqlalchemy(self):\n    read_sql_table('test_type', self.engine, columns=['datetime'])\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_datetime_read_as_native_sqlalchemy.time_sql_datetime_read_as_native_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_datetime_write_sqlalchemy.time_sql_datetime_write_sqlalchemy": {
            "code": "def time_sql_datetime_write_sqlalchemy(self):\n    self.df[['datetime']].to_sql('test_datetime', self.engine, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_datetime_write_sqlalchemy.time_sql_datetime_write_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_float_read_query_fallback.time_sql_float_read_query_fallback": {
            "code": "def time_sql_float_read_query_fallback(self):\n    read_sql_query('SELECT float FROM test_type', self.con)\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_float_read_query_fallback.time_sql_float_read_query_fallback", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_float_read_query_sqlalchemy.time_sql_float_read_query_sqlalchemy": {
            "code": "def time_sql_float_read_query_sqlalchemy(self):\n    read_sql_query('SELECT float FROM test_type', self.engine)\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_float_read_query_sqlalchemy.time_sql_float_read_query_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_float_read_table_sqlalchemy.time_sql_float_read_table_sqlalchemy": {
            "code": "def time_sql_float_read_table_sqlalchemy(self):\n    read_sql_table('test_type', self.engine, columns=['float'])\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_float_read_table_sqlalchemy.time_sql_float_read_table_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_float_write_fallback.time_sql_float_write_fallback": {
            "code": "def time_sql_float_write_fallback(self):\n    self.df[['float']].to_sql('test_float', self.con, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_float_write_fallback.time_sql_float_write_fallback", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_float_write_sqlalchemy.time_sql_float_write_sqlalchemy": {
            "code": "def time_sql_float_write_sqlalchemy(self):\n    self.df[['float']].to_sql('test_float', self.engine, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_float_write_sqlalchemy.time_sql_float_write_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_read_query_fallback.time_sql_read_query_fallback": {
            "code": "def time_sql_read_query_fallback(self):\n    read_sql_query('SELECT * FROM test2', self.con)\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_read_query_fallback.time_sql_read_query_fallback", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_read_query_sqlalchemy.time_sql_read_query_sqlalchemy": {
            "code": "def time_sql_read_query_sqlalchemy(self):\n    read_sql_query('SELECT * FROM test2', self.engine)\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_read_query_sqlalchemy.time_sql_read_query_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_read_table_sqlalchemy.time_sql_read_table_sqlalchemy": {
            "code": "def time_sql_read_table_sqlalchemy(self):\n    read_sql_table('test2', self.engine)\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_read_table_sqlalchemy.time_sql_read_table_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_string_write_fallback.time_sql_string_write_fallback": {
            "code": "def time_sql_string_write_fallback(self):\n    self.df[['string']].to_sql('test_string', self.con, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_string_write_fallback.time_sql_string_write_fallback", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_string_write_sqlalchemy.time_sql_string_write_sqlalchemy": {
            "code": "def time_sql_string_write_sqlalchemy(self):\n    self.df[['string']].to_sql('test_string', self.engine, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_string_write_sqlalchemy.time_sql_string_write_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_write_fallback.time_sql_write_fallback": {
            "code": "def time_sql_write_fallback(self):\n    self.df.to_sql('test1', self.con, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_write_fallback.time_sql_write_fallback", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "io_sql.sql_write_sqlalchemy.time_sql_write_sqlalchemy": {
            "code": "def time_sql_write_sqlalchemy(self):\n    self.df.to_sql('test1', self.engine, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "io_sql.sql_write_sqlalchemy.time_sql_write_sqlalchemy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.append_frame_single_homogenous.time_append_frame_single_homogenous": {
            "code": "def time_append_frame_single_homogenous(self):\n    self.df1.append(self.df2)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.append_frame_single_homogenous.time_append_frame_single_homogenous", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.append_frame_single_mixed.time_append_frame_single_mixed": {
            "code": "def time_append_frame_single_mixed(self):\n    self.mdf1.append(self.mdf2)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.append_frame_single_mixed.time_append_frame_single_mixed", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.concat_empty_frames1.time_concat_empty_frames1": {
            "code": "def time_concat_empty_frames1(self):\n    concat([self.df, self.empty])\n", 
            "goal_time": 0.2, 
            "name": "join_merge.concat_empty_frames1.time_concat_empty_frames1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.concat_empty_frames2.time_concat_empty_frames2": {
            "code": "def time_concat_empty_frames2(self):\n    concat([self.empty, self.df])\n", 
            "goal_time": 0.2, 
            "name": "join_merge.concat_empty_frames2.time_concat_empty_frames2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.concat_series_axis1.time_concat_series_axis1": {
            "code": "def time_concat_series_axis1(self):\n    concat(self.pieces, axis=1)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.concat_series_axis1.time_concat_series_axis1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.concat_small_frames.time_concat_small_frames": {
            "code": "def time_concat_small_frames(self):\n    concat(([self.df] * 1000))\n", 
            "goal_time": 0.2, 
            "name": "join_merge.concat_small_frames.time_concat_small_frames", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.i8merge.time_i8merge": {
            "code": "def time_i8merge(self):\n    merge(self.left, self.right, how='outer')\n", 
            "goal_time": 0.2, 
            "name": "join_merge.i8merge.time_i8merge", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.join_dataframe_index_multi.time_join_dataframe_index_multi": {
            "code": "def time_join_dataframe_index_multi(self):\n    self.df.join(self.df_multi, on=['key1', 'key2'])\n", 
            "goal_time": 0.2, 
            "name": "join_merge.join_dataframe_index_multi.time_join_dataframe_index_multi", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.join_dataframe_index_single_key_bigger.time_join_dataframe_index_single_key_bigger": {
            "code": "def time_join_dataframe_index_single_key_bigger(self):\n    self.df.join(self.df_key2, on='key2')\n", 
            "goal_time": 0.2, 
            "name": "join_merge.join_dataframe_index_single_key_bigger.time_join_dataframe_index_single_key_bigger", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.join_dataframe_index_single_key_bigger_sort.time_join_dataframe_index_single_key_bigger_sort": {
            "code": "def time_join_dataframe_index_single_key_bigger_sort(self):\n    self.df_shuf.join(self.df_key2, on='key2', sort=True)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.join_dataframe_index_single_key_bigger_sort.time_join_dataframe_index_single_key_bigger_sort", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.join_dataframe_index_single_key_small.time_join_dataframe_index_single_key_small": {
            "code": "def time_join_dataframe_index_single_key_small(self):\n    self.df.join(self.df_key1, on='key1')\n", 
            "goal_time": 0.2, 
            "name": "join_merge.join_dataframe_index_single_key_small.time_join_dataframe_index_single_key_small", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.join_dataframe_integer_2key.time_join_dataframe_integer_2key": {
            "code": "def time_join_dataframe_integer_2key(self):\n    merge(self.df, self.df3)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.join_dataframe_integer_2key.time_join_dataframe_integer_2key", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.join_dataframe_integer_key.time_join_dataframe_integer_key": {
            "code": "def time_join_dataframe_integer_key(self):\n    merge(self.df, self.df2, on='key1')\n", 
            "goal_time": 0.2, 
            "name": "join_merge.join_dataframe_integer_key.time_join_dataframe_integer_key", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.join_non_unique_equal.time_join_non_unique_equal": {
            "code": "def time_join_non_unique_equal(self):\n    (self.fracofday * self.temp[self.fracofday.index])\n", 
            "goal_time": 0.2, 
            "name": "join_merge.join_non_unique_equal.time_join_non_unique_equal", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.left_outer_join_index.time_left_outer_join_index": {
            "code": "def time_left_outer_join_index(self):\n    self.left.join(self.right, on='jim')\n", 
            "goal_time": 0.2, 
            "name": "join_merge.left_outer_join_index.time_left_outer_join_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.merge_2intkey_nosort.time_merge_2intkey_nosort": {
            "code": "def time_merge_2intkey_nosort(self):\n    merge(self.left, self.right, sort=False)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.merge_2intkey_nosort.time_merge_2intkey_nosort", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.merge_2intkey_sort.time_merge_2intkey_sort": {
            "code": "def time_merge_2intkey_sort(self):\n    merge(self.left, self.right, sort=True)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.merge_2intkey_sort.time_merge_2intkey_sort", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.series_align_int64_index.time_series_align_int64_index": {
            "code": "def time_series_align_int64_index(self):\n    (self.ts1 + self.ts2)\n", 
            "goal_time": 0.2, 
            "name": "join_merge.series_align_int64_index.time_series_align_int64_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "join_merge.series_align_left_monotonic.time_series_align_left_monotonic": {
            "code": "def time_series_align_left_monotonic(self):\n    self.ts1.align(self.ts2, join='left')\n", 
            "goal_time": 0.2, 
            "name": "join_merge.series_align_left_monotonic.time_series_align_left_monotonic", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "miscellaneous.match_strings.time_match_strings": {
            "code": "def time_match_strings(self):\n    match(self.all, self.uniques)\n", 
            "goal_time": 0.2, 
            "name": "miscellaneous.match_strings.time_match_strings", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "miscellaneous.misc_cache_readonly.time_misc_cache_readonly": {
            "code": "def time_misc_cache_readonly(self):\n    self.obj.prop\n", 
            "goal_time": 0.2, 
            "name": "miscellaneous.misc_cache_readonly.time_misc_cache_readonly", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_csv.time_packers_read_csv": {
            "code": "def time_packers_read_csv(self):\n    pd.read_csv(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_csv.time_packers_read_csv", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_excel.time_packers_read_excel": {
            "code": "def time_packers_read_excel(self):\n    self.bio.seek(0)\n    pd.read_excel(self.bio)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_excel.time_packers_read_excel", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_hdf_store.time_packers_read_hdf_store": {
            "code": "def time_packers_read_hdf_store(self):\n    pd.read_hdf(self.f, 'df')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_hdf_store.time_packers_read_hdf_store", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_hdf_table.time_packers_read_hdf_table": {
            "code": "def time_packers_read_hdf_table(self):\n    pd.read_hdf(self.f, 'df')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_hdf_table.time_packers_read_hdf_table", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_json.time_packers_read_json": {
            "code": "def time_packers_read_json(self):\n    pd.read_json(self.f, orient='split')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_json.time_packers_read_json", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_json_date_index.time_packers_read_json_date_index": {
            "code": "def time_packers_read_json_date_index(self):\n    pd.read_json(self.f, orient='split')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_json_date_index.time_packers_read_json_date_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_pack.time_packers_read_pack": {
            "code": "def time_packers_read_pack(self):\n    pd.read_msgpack(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_pack.time_packers_read_pack", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_pickle.time_packers_read_pickle": {
            "code": "def time_packers_read_pickle(self):\n    pd.read_pickle(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_pickle.time_packers_read_pickle", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_sql.time_packers_read_sql": {
            "code": "def time_packers_read_sql(self):\n    pd.read_sql_table('table', self.engine)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_sql.time_packers_read_sql", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_stata.time_packers_read_stata": {
            "code": "def time_packers_read_stata(self):\n    pd.read_stata(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_stata.time_packers_read_stata", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_read_stata_with_validation.time_packers_read_stata_with_validation": {
            "code": "def time_packers_read_stata_with_validation(self):\n    pd.read_stata(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_read_stata_with_validation.time_packers_read_stata_with_validation", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_csv.time_packers_write_csv": {
            "code": "def time_packers_write_csv(self):\n    self.df.to_csv(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_csv.time_packers_write_csv", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_excel_openpyxl.time_packers_write_excel_openpyxl": {
            "code": "def time_packers_write_excel_openpyxl(self):\n    self.bio.seek(0)\n    self.writer = pd.io.excel.ExcelWriter(self.bio, engine='openpyxl')\n    self.df[:2000].to_excel(self.writer)\n    self.writer.save()\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_excel_openpyxl.time_packers_write_excel_openpyxl", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_excel_xlsxwriter.time_packers_write_excel_xlsxwriter": {
            "code": "def time_packers_write_excel_xlsxwriter(self):\n    self.bio.seek(0)\n    self.writer = pd.io.excel.ExcelWriter(self.bio, engine='xlsxwriter')\n    self.df[:2000].to_excel(self.writer)\n    self.writer.save()\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_excel_xlsxwriter.time_packers_write_excel_xlsxwriter", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_excel_xlwt.time_packers_write_excel_xlwt": {
            "code": "def time_packers_write_excel_xlwt(self):\n    self.bio.seek(0)\n    self.writer = pd.io.excel.ExcelWriter(self.bio, engine='xlwt')\n    self.df[:2000].to_excel(self.writer)\n    self.writer.save()\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_excel_xlwt.time_packers_write_excel_xlwt", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_hdf_store.time_packers_write_hdf_store": {
            "code": "def time_packers_write_hdf_store(self):\n    self.df2.to_hdf(self.f, 'df')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_hdf_store.time_packers_write_hdf_store", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_hdf_table.time_packers_write_hdf_table": {
            "code": "def time_packers_write_hdf_table(self):\n    self.df2.to_hdf(self.f, 'df', table=True)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_hdf_table.time_packers_write_hdf_table", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_json.time_packers_write_json": {
            "code": "def time_packers_write_json(self):\n    self.df.to_json(self.f, orient='split')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_json.time_packers_write_json", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_json_T.time_packers_write_json_T": {
            "code": "def time_packers_write_json_T(self):\n    self.df.to_json(self.f, orient='columns')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_json_T.time_packers_write_json_T", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_json_date_index.time_packers_write_json_date_index": {
            "code": "def time_packers_write_json_date_index(self):\n    self.df.to_json(self.f, orient='split')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_json_date_index.time_packers_write_json_date_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_json_mixed_delta_int_tstamp.time_packers_write_json_mixed_delta_int_tstamp": {
            "code": "def time_packers_write_json_mixed_delta_int_tstamp(self):\n    self.df_mixed.to_json(self.f, orient='split')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_json_mixed_delta_int_tstamp.time_packers_write_json_mixed_delta_int_tstamp", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_json_mixed_float_int.time_packers_write_json_mixed_float_int": {
            "code": "def time_packers_write_json_mixed_float_int(self):\n    self.df_mixed.to_json(self.f, orient='index')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_json_mixed_float_int.time_packers_write_json_mixed_float_int", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_json_mixed_float_int_T.time_packers_write_json_mixed_float_int_T": {
            "code": "def time_packers_write_json_mixed_float_int_T(self):\n    self.df_mixed.to_json(self.f, orient='columns')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_json_mixed_float_int_T.time_packers_write_json_mixed_float_int_T", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_json_mixed_float_int_str.time_packers_write_json_mixed_float_int_str": {
            "code": "def time_packers_write_json_mixed_float_int_str(self):\n    self.df_mixed.to_json(self.f, orient='split')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_json_mixed_float_int_str.time_packers_write_json_mixed_float_int_str", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_pack.time_packers_write_pack": {
            "code": "def time_packers_write_pack(self):\n    self.df2.to_msgpack(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_pack.time_packers_write_pack", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_pickle.time_packers_write_pickle": {
            "code": "def time_packers_write_pickle(self):\n    self.df2.to_pickle(self.f)\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_pickle.time_packers_write_pickle", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_sql.time_packers_write_sql": {
            "code": "def time_packers_write_sql(self):\n    self.df2.to_sql('table', self.engine, if_exists='replace')\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_sql.time_packers_write_sql", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_stata.time_packers_write_stata": {
            "code": "def time_packers_write_stata(self):\n    self.df.to_stata(self.f, {'index': 'tc', })\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_stata.time_packers_write_stata", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "packers.packers_write_stata_with_validation.time_packers_write_stata_with_validation": {
            "code": "def time_packers_write_stata_with_validation(self):\n    self.df.to_stata(self.f, {'index': 'tc', })\n", 
            "goal_time": 0.2, 
            "name": "packers.packers_write_stata_with_validation.time_packers_write_stata_with_validation", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_ctor.panel_from_dict_all_different_indexes.time_panel_from_dict_all_different_indexes": {
            "code": "def time_panel_from_dict_all_different_indexes(self):\n    Panel.from_dict(self.data_frames)\n", 
            "goal_time": 0.2, 
            "name": "panel_ctor.panel_from_dict_all_different_indexes.time_panel_from_dict_all_different_indexes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_ctor.panel_from_dict_equiv_indexes.time_panel_from_dict_equiv_indexes": {
            "code": "def time_panel_from_dict_equiv_indexes(self):\n    Panel.from_dict(self.data_frames)\n", 
            "goal_time": 0.2, 
            "name": "panel_ctor.panel_from_dict_equiv_indexes.time_panel_from_dict_equiv_indexes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_ctor.panel_from_dict_same_index.time_panel_from_dict_same_index": {
            "code": "def time_panel_from_dict_same_index(self):\n    Panel.from_dict(self.data_frames)\n", 
            "goal_time": 0.2, 
            "name": "panel_ctor.panel_from_dict_same_index.time_panel_from_dict_same_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_ctor.panel_from_dict_two_different_indexes.time_panel_from_dict_two_different_indexes": {
            "code": "def time_panel_from_dict_two_different_indexes(self):\n    Panel.from_dict(self.data_frames)\n", 
            "goal_time": 0.2, 
            "name": "panel_ctor.panel_from_dict_two_different_indexes.time_panel_from_dict_two_different_indexes", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_methods.panel_pct_change_items.time_panel_pct_change_items": {
            "code": "def time_panel_pct_change_items(self):\n    self.panel.pct_change(1, axis='items')\n", 
            "goal_time": 0.2, 
            "name": "panel_methods.panel_pct_change_items.time_panel_pct_change_items", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_methods.panel_pct_change_major.time_panel_pct_change_major": {
            "code": "def time_panel_pct_change_major(self):\n    self.panel.pct_change(1, axis='major')\n", 
            "goal_time": 0.2, 
            "name": "panel_methods.panel_pct_change_major.time_panel_pct_change_major", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_methods.panel_pct_change_minor.time_panel_pct_change_minor": {
            "code": "def time_panel_pct_change_minor(self):\n    self.panel.pct_change(1, axis='minor')\n", 
            "goal_time": 0.2, 
            "name": "panel_methods.panel_pct_change_minor.time_panel_pct_change_minor", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_methods.panel_shift.time_panel_shift": {
            "code": "def time_panel_shift(self):\n    self.panel.shift(1)\n", 
            "goal_time": 0.2, 
            "name": "panel_methods.panel_shift.time_panel_shift", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "panel_methods.panel_shift_minor.time_panel_shift_minor": {
            "code": "def time_panel_shift_minor(self):\n    self.panel.shift(1, axis='minor')\n", 
            "goal_time": 0.2, 
            "name": "panel_methods.panel_shift_minor.time_panel_shift_minor", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_csv_comment2.time_read_csv_comment2": {
            "code": "def time_read_csv_comment2(self):\n    read_csv(StringIO(self.data), comment='#')\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_csv_comment2.time_read_csv_comment2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_csv_default_converter.time_read_csv_default_converter": {
            "code": "def time_read_csv_default_converter(self):\n    read_csv(StringIO(self.data), sep=',', header=None, float_precision=None)\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_csv_default_converter.time_read_csv_default_converter", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_csv_precise_converter.time_read_csv_precise_converter": {
            "code": "def time_read_csv_precise_converter(self):\n    read_csv(StringIO(self.data), sep=',', header=None, float_precision='high')\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_csv_precise_converter.time_read_csv_precise_converter", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_csv_roundtrip_converter.time_read_csv_roundtrip_converter": {
            "code": "def time_read_csv_roundtrip_converter(self):\n    read_csv(StringIO(self.data), sep=',', header=None, float_precision='round_trip')\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_csv_roundtrip_converter.time_read_csv_roundtrip_converter", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_csv_thou_vb.time_read_csv_thou_vb": {
            "code": "def time_read_csv_thou_vb(self):\n    read_csv('test.csv', sep='|', thousands=',')\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_csv_thou_vb.time_read_csv_thou_vb", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_csv_vb.time_read_csv_vb": {
            "code": "def time_read_csv_vb(self):\n    read_csv('test.csv', sep='|')\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_csv_vb.time_read_csv_vb", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_table_multiple_date.time_read_table_multiple_date": {
            "code": "def time_read_table_multiple_date(self):\n    read_table(StringIO(self.data), sep=',', header=None, parse_dates=[[1, 2], [1, 3]])\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_table_multiple_date.time_read_table_multiple_date", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "parser_vb.read_table_multiple_date_baseline.time_read_table_multiple_date_baseline": {
            "code": "def time_read_table_multiple_date_baseline(self):\n    read_table(StringIO(self.data), sep=',', header=None, parse_dates=[1])\n", 
            "goal_time": 0.2, 
            "name": "parser_vb.read_table_multiple_date_baseline.time_read_table_multiple_date_baseline", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "plotting.plot_timeseries_period.time_plot_timeseries_period": {
            "code": "def time_plot_timeseries_period(self):\n    self.df.plot()\n", 
            "goal_time": 0.2, 
            "name": "plotting.plot_timeseries_period.time_plot_timeseries_period", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.dataframe_reindex.time_dataframe_reindex": {
            "code": "def time_dataframe_reindex(self):\n    self.df.reindex(self.rng2)\n", 
            "goal_time": 0.2, 
            "name": "reindex.dataframe_reindex.time_dataframe_reindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_drop_dup_inplace.time_frame_drop_dup_inplace": {
            "code": "def time_frame_drop_dup_inplace(self):\n    self.df.drop_duplicates(['key1', 'key2'], inplace=True)\n", 
            "goal_time": 0.2, 
            "name": "reindex.frame_drop_dup_inplace.time_frame_drop_dup_inplace", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_drop_dup_na_inplace.time_frame_drop_dup_na_inplace": {
            "code": "def time_frame_drop_dup_na_inplace(self):\n    self.df.drop_duplicates(['key1', 'key2'], inplace=True)\n", 
            "goal_time": 0.2, 
            "name": "reindex.frame_drop_dup_na_inplace.time_frame_drop_dup_na_inplace", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_drop_duplicates.time_frame_drop_duplicates": {
            "code": "def time_frame_drop_duplicates(self):\n    self.df.drop_duplicates(['key1', 'key2'])\n", 
            "goal_time": 0.2, 
            "name": "reindex.frame_drop_duplicates.time_frame_drop_duplicates", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_drop_duplicates_int.time_frame_drop_duplicates_int": {
            "code": "def time_frame_drop_duplicates_int(self):\n    self.df.drop_duplicates()\n", 
            "goal_time": 2.0, 
            "name": "reindex.frame_drop_duplicates_int.time_frame_drop_duplicates_int", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_drop_duplicates_na.time_frame_drop_duplicates_na": {
            "code": "def time_frame_drop_duplicates_na(self):\n    self.df.drop_duplicates(['key1', 'key2'])\n", 
            "goal_time": 0.2, 
            "name": "reindex.frame_drop_duplicates_na.time_frame_drop_duplicates_na", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_fillna_many_columns_pad.time_frame_fillna_many_columns_pad": {
            "code": "def time_frame_fillna_many_columns_pad(self):\n    self.df.fillna(method='pad')\n", 
            "goal_time": 0.2, 
            "name": "reindex.frame_fillna_many_columns_pad.time_frame_fillna_many_columns_pad", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_reindex_columns.time_frame_reindex_columns": {
            "code": "def time_frame_reindex_columns(self):\n    self.df.reindex(columns=self.df.columns[1:5])\n", 
            "goal_time": 0.2, 
            "name": "reindex.frame_reindex_columns.time_frame_reindex_columns", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.frame_sort_index_by_columns.time_frame_sort_index_by_columns": {
            "code": "def time_frame_sort_index_by_columns(self):\n    self.df.sort_index(by=['key1', 'key2'])\n", 
            "goal_time": 0.2, 
            "name": "reindex.frame_sort_index_by_columns.time_frame_sort_index_by_columns", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.lib_fast_zip.time_lib_fast_zip": {
            "code": "def time_lib_fast_zip(self):\n    lib.fast_zip(self.col_array_list)\n", 
            "goal_time": 0.2, 
            "name": "reindex.lib_fast_zip.time_lib_fast_zip", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.lib_fast_zip_fillna.time_lib_fast_zip_fillna": {
            "code": "def time_lib_fast_zip_fillna(self):\n    lib.fast_zip_fillna(self.col_array_list)\n", 
            "goal_time": 0.2, 
            "name": "reindex.lib_fast_zip_fillna.time_lib_fast_zip_fillna", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_daterange_backfill.time_reindex_daterange_backfill": {
            "code": "def time_reindex_daterange_backfill(self):\n    self.backfill(self.ts2, self.ts.index)\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_daterange_backfill.time_reindex_daterange_backfill", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_daterange_pad.time_reindex_daterange_pad": {
            "code": "def time_reindex_daterange_pad(self):\n    self.pad(self.ts2, self.ts.index)\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_daterange_pad.time_reindex_daterange_pad", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_fillna_backfill.time_reindex_fillna_backfill": {
            "code": "def time_reindex_fillna_backfill(self):\n    self.ts3.fillna(method='backfill')\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_fillna_backfill.time_reindex_fillna_backfill", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_fillna_backfill_float32.time_reindex_fillna_backfill_float32": {
            "code": "def time_reindex_fillna_backfill_float32(self):\n    self.ts4.fillna(method='backfill')\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_fillna_backfill_float32.time_reindex_fillna_backfill_float32", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_fillna_pad.time_reindex_fillna_pad": {
            "code": "def time_reindex_fillna_pad(self):\n    self.ts3.fillna(method='pad')\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_fillna_pad.time_reindex_fillna_pad", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_fillna_pad_float32.time_reindex_fillna_pad_float32": {
            "code": "def time_reindex_fillna_pad_float32(self):\n    self.ts4.fillna(method='pad')\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_fillna_pad_float32.time_reindex_fillna_pad_float32", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_frame_level_align.time_reindex_frame_level_align": {
            "code": "def time_reindex_frame_level_align(self):\n    self.df.align(self.df_level, level=1, copy=False)\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_frame_level_align.time_reindex_frame_level_align", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_frame_level_reindex.time_reindex_frame_level_reindex": {
            "code": "def time_reindex_frame_level_reindex(self):\n    self.df_level.reindex(self.df.index, level=1)\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_frame_level_reindex.time_reindex_frame_level_reindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.reindex_multiindex.time_reindex_multiindex": {
            "code": "def time_reindex_multiindex(self):\n    self.s1.reindex(self.s2.index)\n", 
            "goal_time": 0.2, 
            "name": "reindex.reindex_multiindex.time_reindex_multiindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.series_align_irregular_string.time_series_align_irregular_string": {
            "code": "def time_series_align_irregular_string(self):\n    (self.x + self.y)\n", 
            "goal_time": 0.2, 
            "name": "reindex.series_align_irregular_string.time_series_align_irregular_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.series_drop_duplicates_int.time_series_drop_duplicates_int": {
            "code": "def time_series_drop_duplicates_int(self):\n    self.s.drop_duplicates()\n", 
            "goal_time": 0.2, 
            "name": "reindex.series_drop_duplicates_int.time_series_drop_duplicates_int", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reindex.series_drop_duplicates_string.time_series_drop_duplicates_string": {
            "code": "def time_series_drop_duplicates_string(self):\n    self.s2.drop_duplicates()\n", 
            "goal_time": 0.2, 
            "name": "reindex.series_drop_duplicates_string.time_series_drop_duplicates_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "replace.replace_fillna.time_replace_fillna": {
            "code": "def time_replace_fillna(self):\n    self.ts.fillna(0.0, inplace=True)\n", 
            "goal_time": 0.2, 
            "name": "replace.replace_fillna.time_replace_fillna", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "replace.replace_large_dict.time_replace_large_dict": {
            "code": "def time_replace_large_dict(self):\n    self.s.replace(self.to_rep, inplace=True)\n", 
            "goal_time": 0.2, 
            "name": "replace.replace_large_dict.time_replace_large_dict", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "replace.replace_replacena.time_replace_replacena": {
            "code": "def time_replace_replacena(self):\n    self.ts.replace(np.nan, 0.0, inplace=True)\n", 
            "goal_time": 0.2, 
            "name": "replace.replace_replacena.time_replace_replacena", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reshape.melt_dataframe.time_melt_dataframe": {
            "code": "def time_melt_dataframe(self):\n    melt(self.df, id_vars=['id1', 'id2'])\n", 
            "goal_time": 0.2, 
            "name": "reshape.melt_dataframe.time_melt_dataframe", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reshape.reshape_pivot_time_series.time_reshape_pivot_time_series": {
            "code": "def time_reshape_pivot_time_series(self):\n    self.f()\n", 
            "goal_time": 0.2, 
            "name": "reshape.reshape_pivot_time_series.time_reshape_pivot_time_series", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reshape.reshape_stack_simple.time_reshape_stack_simple": {
            "code": "def time_reshape_stack_simple(self):\n    self.udf.stack()\n", 
            "goal_time": 0.2, 
            "name": "reshape.reshape_stack_simple.time_reshape_stack_simple", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reshape.reshape_unstack_simple.time_reshape_unstack_simple": {
            "code": "def time_reshape_unstack_simple(self):\n    self.df.unstack(1)\n", 
            "goal_time": 0.2, 
            "name": "reshape.reshape_unstack_simple.time_reshape_unstack_simple", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "reshape.unstack_sparse_keyspace.time_unstack_sparse_keyspace": {
            "code": "def time_unstack_sparse_keyspace(self):\n    self.idf.unstack()\n", 
            "goal_time": 0.2, 
            "name": "reshape.unstack_sparse_keyspace.time_unstack_sparse_keyspace", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "series_methods.series_isin_int64.time_series_isin_int64": {
            "code": "def time_series_isin_int64(self):\n    self.s3.isin(self.values)\n", 
            "goal_time": 0.2, 
            "name": "series_methods.series_isin_int64.time_series_isin_int64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "series_methods.series_isin_object.time_series_isin_object": {
            "code": "def time_series_isin_object(self):\n    self.s4.isin(self.values)\n", 
            "goal_time": 0.2, 
            "name": "series_methods.series_isin_object.time_series_isin_object", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "series_methods.series_nlargest1.time_series_nlargest1": {
            "code": "def time_series_nlargest1(self):\n    self.s1.nlargest(3, take_last=True)\n    self.s1.nlargest(3, take_last=False)\n", 
            "goal_time": 0.2, 
            "name": "series_methods.series_nlargest1.time_series_nlargest1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "series_methods.series_nlargest2.time_series_nlargest2": {
            "code": "def time_series_nlargest2(self):\n    self.s2.nlargest(3, take_last=True)\n    self.s2.nlargest(3, take_last=False)\n", 
            "goal_time": 0.2, 
            "name": "series_methods.series_nlargest2.time_series_nlargest2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "series_methods.series_nsmallest2.time_series_nsmallest2": {
            "code": "def time_series_nsmallest2(self):\n    self.s2.nsmallest(3, take_last=True)\n    self.s2.nsmallest(3, take_last=False)\n", 
            "goal_time": 0.2, 
            "name": "series_methods.series_nsmallest2.time_series_nsmallest2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "sparse.sparse_frame_constructor.time_sparse_frame_constructor": {
            "code": "def time_sparse_frame_constructor(self):\n    SparseDataFrame(columns=np.arange(100), index=np.arange(1000))\n", 
            "goal_time": 0.2, 
            "name": "sparse.sparse_frame_constructor.time_sparse_frame_constructor", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "sparse.sparse_series_from_coo.time_sparse_series_from_coo": {
            "code": "def time_sparse_series_from_coo(self):\n    self.ss = pandas.sparse.series.SparseSeries.from_coo(self.A)\n", 
            "goal_time": 0.2, 
            "name": "sparse.sparse_series_from_coo.time_sparse_series_from_coo", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "sparse.sparse_series_to_coo.time_sparse_series_to_coo": {
            "code": "def time_sparse_series_to_coo(self):\n    self.ss.to_coo(row_levels=[0, 1], column_levels=[2, 3], sort_labels=True)\n", 
            "goal_time": 0.2, 
            "name": "sparse.sparse_series_to_coo.time_sparse_series_to_coo", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "sparse.sparse_series_to_frame.time_sparse_series_to_frame": {
            "code": "def time_sparse_series_to_frame(self):\n    SparseDataFrame(self.series)\n", 
            "goal_time": 0.2, 
            "name": "sparse.sparse_series_to_frame.time_sparse_series_to_frame", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_mean_float_axis_0.time_stat_ops_frame_mean_float_axis_0": {
            "code": "def time_stat_ops_frame_mean_float_axis_0(self):\n    self.df.mean()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_mean_float_axis_0.time_stat_ops_frame_mean_float_axis_0", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_mean_float_axis_1.time_stat_ops_frame_mean_float_axis_1": {
            "code": "def time_stat_ops_frame_mean_float_axis_1(self):\n    self.df.mean(1)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_mean_float_axis_1.time_stat_ops_frame_mean_float_axis_1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_mean_int_axis_0.time_stat_ops_frame_mean_int_axis_0": {
            "code": "def time_stat_ops_frame_mean_int_axis_0(self):\n    self.dfi.mean()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_mean_int_axis_0.time_stat_ops_frame_mean_int_axis_0", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_mean_int_axis_1.time_stat_ops_frame_mean_int_axis_1": {
            "code": "def time_stat_ops_frame_mean_int_axis_1(self):\n    self.dfi.mean(1)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_mean_int_axis_1.time_stat_ops_frame_mean_int_axis_1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_sum_float_axis_0.time_stat_ops_frame_sum_float_axis_0": {
            "code": "def time_stat_ops_frame_sum_float_axis_0(self):\n    self.df.sum()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_sum_float_axis_0.time_stat_ops_frame_sum_float_axis_0", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_sum_float_axis_1.time_stat_ops_frame_sum_float_axis_1": {
            "code": "def time_stat_ops_frame_sum_float_axis_1(self):\n    self.df.sum(1)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_sum_float_axis_1.time_stat_ops_frame_sum_float_axis_1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_sum_int_axis_0.time_stat_ops_frame_sum_int_axis_0": {
            "code": "def time_stat_ops_frame_sum_int_axis_0(self):\n    self.dfi.sum()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_sum_int_axis_0.time_stat_ops_frame_sum_int_axis_0", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_frame_sum_int_axis_1.time_stat_ops_frame_sum_int_axis_1": {
            "code": "def time_stat_ops_frame_sum_int_axis_1(self):\n    self.dfi.sum(1)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_frame_sum_int_axis_1.time_stat_ops_frame_sum_int_axis_1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_level_frame_sum.time_stat_ops_level_frame_sum": {
            "code": "def time_stat_ops_level_frame_sum(self):\n    self.df.sum(level=1)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_level_frame_sum.time_stat_ops_level_frame_sum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_level_frame_sum_multiple.time_stat_ops_level_frame_sum_multiple": {
            "code": "def time_stat_ops_level_frame_sum_multiple(self):\n    self.df.sum(level=[0, 1])\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_level_frame_sum_multiple.time_stat_ops_level_frame_sum_multiple", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_level_series_sum.time_stat_ops_level_series_sum": {
            "code": "def time_stat_ops_level_series_sum(self):\n    self.df[1].sum(level=1)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_level_series_sum.time_stat_ops_level_series_sum", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_level_series_sum_multiple.time_stat_ops_level_series_sum_multiple": {
            "code": "def time_stat_ops_level_series_sum_multiple(self):\n    self.df[1].sum(level=[0, 1])\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_level_series_sum_multiple.time_stat_ops_level_series_sum_multiple", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stat_ops_series_std.time_stat_ops_series_std": {
            "code": "def time_stat_ops_series_std(self):\n    self.s.std()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stat_ops_series_std.time_stat_ops_series_std", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_corr_spearman.time_stats_corr_spearman": {
            "code": "def time_stats_corr_spearman(self):\n    self.df.corr(method='spearman')\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_corr_spearman.time_stats_corr_spearman", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_rank2d_axis0_average.time_stats_rank2d_axis0_average": {
            "code": "def time_stats_rank2d_axis0_average(self):\n    self.df.rank()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_rank2d_axis0_average.time_stats_rank2d_axis0_average", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_rank2d_axis1_average.time_stats_rank2d_axis1_average": {
            "code": "def time_stats_rank2d_axis1_average(self):\n    self.df.rank(1)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_rank2d_axis1_average.time_stats_rank2d_axis1_average", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_rank_average.time_stats_rank_average": {
            "code": "def time_stats_rank_average(self):\n    self.s.rank()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_rank_average.time_stats_rank_average", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_rank_average_int.time_stats_rank_average_int": {
            "code": "def time_stats_rank_average_int(self):\n    self.s.rank()\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_rank_average_int.time_stats_rank_average_int", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_rank_pct_average.time_stats_rank_pct_average": {
            "code": "def time_stats_rank_pct_average(self):\n    self.s.rank(pct=True)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_rank_pct_average.time_stats_rank_pct_average", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_rank_pct_average_old.time_stats_rank_pct_average_old": {
            "code": "def time_stats_rank_pct_average_old(self):\n    (self.s.rank() / len(self.s))\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_rank_pct_average_old.time_stats_rank_pct_average_old", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "stat_ops.stats_rolling_mean.time_stats_rolling_mean": {
            "code": "def time_stats_rolling_mean(self):\n    rolling_mean(self.arr, 100)\n", 
            "goal_time": 0.2, 
            "name": "stat_ops.stats_rolling_mean.time_stats_rolling_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_cat.time_strings_cat": {
            "code": "def time_strings_cat(self):\n    self.many.str.cat(sep=',')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_cat.time_strings_cat", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_center.time_strings_center": {
            "code": "def time_strings_center(self):\n    self.many.str.center(100)\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_center.time_strings_center", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_contains_few.time_strings_contains_few": {
            "code": "def time_strings_contains_few(self):\n    self.few.str.contains('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_contains_few.time_strings_contains_few", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_contains_few_noregex.time_strings_contains_few_noregex": {
            "code": "def time_strings_contains_few_noregex(self):\n    self.few.str.contains('matchthis', regex=False)\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_contains_few_noregex.time_strings_contains_few_noregex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_contains_many.time_strings_contains_many": {
            "code": "def time_strings_contains_many(self):\n    self.many.str.contains('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_contains_many.time_strings_contains_many", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_contains_many_noregex.time_strings_contains_many_noregex": {
            "code": "def time_strings_contains_many_noregex(self):\n    self.many.str.contains('matchthis', regex=False)\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_contains_many_noregex.time_strings_contains_many_noregex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_count.time_strings_count": {
            "code": "def time_strings_count(self):\n    self.many.str.count('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_count.time_strings_count", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_encode_decode.time_strings_encode_decode": {
            "code": "def time_strings_encode_decode(self):\n    self.ser.str.encode('utf-8').str.decode('utf-8')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_encode_decode.time_strings_encode_decode", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_endswith.time_strings_endswith": {
            "code": "def time_strings_endswith(self):\n    self.many.str.endswith('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_endswith.time_strings_endswith", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_extract.time_strings_extract": {
            "code": "def time_strings_extract(self):\n    self.many.str.extract('(\\\\w*)matchthis(\\\\w*)')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_extract.time_strings_extract", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_findall.time_strings_findall": {
            "code": "def time_strings_findall(self):\n    self.many.str.findall('[A-Z]+')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_findall.time_strings_findall", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_get.time_strings_get": {
            "code": "def time_strings_get(self):\n    self.many.str.get(0)\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_get.time_strings_get", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_get_dummies.time_strings_get_dummies": {
            "code": "def time_strings_get_dummies(self):\n    self.s.str.get_dummies('|')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_get_dummies.time_strings_get_dummies", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_join_split.time_strings_join_split": {
            "code": "def time_strings_join_split(self):\n    self.many.str.join('--').str.split('--')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_join_split.time_strings_join_split", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_join_split_expand.time_strings_join_split_expand": {
            "code": "def time_strings_join_split_expand(self):\n    self.many.str.join('--').str.split('--', expand=True)\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_join_split_expand.time_strings_join_split_expand", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_len.time_strings_len": {
            "code": "def time_strings_len(self):\n    self.many.str.len()\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_len.time_strings_len", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_lower.time_strings_lower": {
            "code": "def time_strings_lower(self):\n    self.many.str.lower()\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_lower.time_strings_lower", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_lstrip.time_strings_lstrip": {
            "code": "def time_strings_lstrip(self):\n    self.many.str.lstrip('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_lstrip.time_strings_lstrip", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_match.time_strings_match": {
            "code": "def time_strings_match(self):\n    self.many.str.match('mat..this')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_match.time_strings_match", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_pad.time_strings_pad": {
            "code": "def time_strings_pad(self):\n    self.many.str.pad(100, side='both')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_pad.time_strings_pad", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_repeat.time_strings_repeat": {
            "code": "def time_strings_repeat(self):\n    self.many.str.repeat(list(IT.islice(IT.cycle(range(1, 4)), len(self.many))))\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_repeat.time_strings_repeat", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_replace.time_strings_replace": {
            "code": "def time_strings_replace(self):\n    self.many.str.replace('(matchthis)', '\\x01\\x01')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_replace.time_strings_replace", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_rstrip.time_strings_rstrip": {
            "code": "def time_strings_rstrip(self):\n    self.many.str.rstrip('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_rstrip.time_strings_rstrip", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_slice.time_strings_slice": {
            "code": "def time_strings_slice(self):\n    self.many.str.slice(5, 15, 2)\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_slice.time_strings_slice", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_startswith.time_strings_startswith": {
            "code": "def time_strings_startswith(self):\n    self.many.str.startswith('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_startswith.time_strings_startswith", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_strip.time_strings_strip": {
            "code": "def time_strings_strip(self):\n    self.many.str.strip('matchthis')\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_strip.time_strings_strip", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_title.time_strings_title": {
            "code": "def time_strings_title(self):\n    self.many.str.title()\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_title.time_strings_title", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "strings.strings_upper.time_strings_upper": {
            "code": "def time_strings_upper(self):\n    self.many.str.upper()\n", 
            "goal_time": 0.2, 
            "name": "strings.strings_upper.time_strings_upper", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timedelta.timedelta_convert_int.time_timedelta_convert_int": {
            "code": "def time_timedelta_convert_int(self):\n    to_timedelta(self.arr, unit='s')\n", 
            "goal_time": 0.2, 
            "name": "timedelta.timedelta_convert_int.time_timedelta_convert_int", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timedelta.timedelta_convert_string.time_timedelta_convert_string": {
            "code": "def time_timedelta_convert_string(self):\n    to_timedelta(self.arr)\n", 
            "goal_time": 0.2, 
            "name": "timedelta.timedelta_convert_string.time_timedelta_convert_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timedelta.timedelta_convert_string_seconds.time_timedelta_convert_string_seconds": {
            "code": "def time_timedelta_convert_string_seconds(self):\n    to_timedelta(self.arr)\n", 
            "goal_time": 0.2, 
            "name": "timedelta.timedelta_convert_string_seconds.time_timedelta_convert_string_seconds", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dataframe_resample_max_numpy.time_dataframe_resample_max_numpy": {
            "code": "def time_dataframe_resample_max_numpy(self):\n    self.df.resample('1s', how=np.max)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dataframe_resample_max_numpy.time_dataframe_resample_max_numpy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dataframe_resample_max_string.time_dataframe_resample_max_string": {
            "code": "def time_dataframe_resample_max_string(self):\n    self.df.resample('1s', how='max')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dataframe_resample_max_string.time_dataframe_resample_max_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dataframe_resample_mean_numpy.time_dataframe_resample_mean_numpy": {
            "code": "def time_dataframe_resample_mean_numpy(self):\n    self.df.resample('1s', how=np.mean)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dataframe_resample_mean_numpy.time_dataframe_resample_mean_numpy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dataframe_resample_mean_string.time_dataframe_resample_mean_string": {
            "code": "def time_dataframe_resample_mean_string(self):\n    self.df.resample('1s', how='mean')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dataframe_resample_mean_string.time_dataframe_resample_mean_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dataframe_resample_min_numpy.time_dataframe_resample_min_numpy": {
            "code": "def time_dataframe_resample_min_numpy(self):\n    self.df.resample('1s', how=np.min)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dataframe_resample_min_numpy.time_dataframe_resample_min_numpy", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dataframe_resample_min_string.time_dataframe_resample_min_string": {
            "code": "def time_dataframe_resample_min_string(self):\n    self.df.resample('1s', how='min')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dataframe_resample_min_string.time_dataframe_resample_min_string", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.datetimeindex_add_offset.time_datetimeindex_add_offset": {
            "code": "def time_datetimeindex_add_offset(self):\n    (self.rng + timedelta(minutes=2))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.datetimeindex_add_offset.time_datetimeindex_add_offset", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.datetimeindex_converter.time_datetimeindex_converter": {
            "code": "def time_datetimeindex_converter(self):\n    DatetimeConverter.convert(self.rng, None, None)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.datetimeindex_converter.time_datetimeindex_converter", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.datetimeindex_infer_dst.time_datetimeindex_infer_dst": {
            "code": "def time_datetimeindex_infer_dst(self):\n    self.index.tz_localize('US/Eastern', infer_dst=True)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.datetimeindex_infer_dst.time_datetimeindex_infer_dst", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.datetimeindex_normalize.time_datetimeindex_normalize": {
            "code": "def time_datetimeindex_normalize(self):\n    self.rng.normalize()\n", 
            "goal_time": 0.2, 
            "name": "timeseries.datetimeindex_normalize.time_datetimeindex_normalize", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.datetimeindex_unique.time_datetimeindex_unique": {
            "code": "def time_datetimeindex_unique(self):\n    self.index.unique()\n", 
            "goal_time": 0.2, 
            "name": "timeseries.datetimeindex_unique.time_datetimeindex_unique", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dti_reset_index.time_dti_reset_index": {
            "code": "def time_dti_reset_index(self):\n    self.df.reset_index()\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dti_reset_index.time_dti_reset_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.dti_reset_index_tz.time_dti_reset_index_tz": {
            "code": "def time_dti_reset_index_tz(self):\n    self.df.reset_index()\n", 
            "goal_time": 0.2, 
            "name": "timeseries.dti_reset_index_tz.time_dti_reset_index_tz", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.period_setitem.time_period_setitem": {
            "code": "def time_period_setitem(self):\n    self.df['col'] = self.rng\n", 
            "goal_time": 0.2, 
            "name": "timeseries.period_setitem.time_period_setitem", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_1min_5min_mean.time_timeseries_1min_5min_mean": {
            "code": "def time_timeseries_1min_5min_mean(self):\n    self.ts[:10000].resample('5min', how='mean')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_1min_5min_mean.time_timeseries_1min_5min_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_1min_5min_ohlc.time_timeseries_1min_5min_ohlc": {
            "code": "def time_timeseries_1min_5min_ohlc(self):\n    self.ts[:10000].resample('5min', how='ohlc')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_1min_5min_ohlc.time_timeseries_1min_5min_ohlc", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_add_irregular.time_timeseries_add_irregular": {
            "code": "def time_timeseries_add_irregular(self):\n    (self.left + self.right)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_add_irregular.time_timeseries_add_irregular", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_asof.time_timeseries_asof": {
            "code": "def time_timeseries_asof(self):\n    self.ts.asof(self.dates)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_asof.time_timeseries_asof", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_asof_nan.time_timeseries_asof_nan": {
            "code": "def time_timeseries_asof_nan(self):\n    self.ts.asof(self.dates)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_asof_nan.time_timeseries_asof_nan", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_asof_single.time_timeseries_asof_single": {
            "code": "def time_timeseries_asof_single(self):\n    self.ts.asof(self.dates[0])\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_asof_single.time_timeseries_asof_single", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_apply.time_timeseries_custom_bday_apply": {
            "code": "def time_timeseries_custom_bday_apply(self):\n    self.cday.apply(self.date)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_apply.time_timeseries_custom_bday_apply", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_apply_dt64.time_timeseries_custom_bday_apply_dt64": {
            "code": "def time_timeseries_custom_bday_apply_dt64(self):\n    self.cday.apply(self.dt64)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_apply_dt64.time_timeseries_custom_bday_apply_dt64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_cal_decr.time_timeseries_custom_bday_cal_decr": {
            "code": "def time_timeseries_custom_bday_cal_decr(self):\n    (self.date - (1 * self.cdayh))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_cal_decr.time_timeseries_custom_bday_cal_decr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_cal_incr.time_timeseries_custom_bday_cal_incr": {
            "code": "def time_timeseries_custom_bday_cal_incr(self):\n    (self.date + (1 * self.cdayh))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_cal_incr.time_timeseries_custom_bday_cal_incr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_cal_incr_n.time_timeseries_custom_bday_cal_incr_n": {
            "code": "def time_timeseries_custom_bday_cal_incr_n(self):\n    (self.date + (10 * self.cdayh))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_cal_incr_n.time_timeseries_custom_bday_cal_incr_n", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_cal_incr_neg_n.time_timeseries_custom_bday_cal_incr_neg_n": {
            "code": "def time_timeseries_custom_bday_cal_incr_neg_n(self):\n    (self.date - (10 * self.cdayh))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_cal_incr_neg_n.time_timeseries_custom_bday_cal_incr_neg_n", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_decr.time_timeseries_custom_bday_decr": {
            "code": "def time_timeseries_custom_bday_decr(self):\n    (self.date - self.cday)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_decr.time_timeseries_custom_bday_decr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bday_incr.time_timeseries_custom_bday_incr": {
            "code": "def time_timeseries_custom_bday_incr(self):\n    (self.date + self.cday)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bday_incr.time_timeseries_custom_bday_incr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bmonthbegin_decr_n.time_timeseries_custom_bmonthbegin_decr_n": {
            "code": "def time_timeseries_custom_bmonthbegin_decr_n(self):\n    (self.date - (10 * self.cmb))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bmonthbegin_decr_n.time_timeseries_custom_bmonthbegin_decr_n", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bmonthbegin_incr_n.time_timeseries_custom_bmonthbegin_incr_n": {
            "code": "def time_timeseries_custom_bmonthbegin_incr_n(self):\n    (self.date + (10 * self.cmb))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bmonthbegin_incr_n.time_timeseries_custom_bmonthbegin_incr_n", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bmonthend_decr_n.time_timeseries_custom_bmonthend_decr_n": {
            "code": "def time_timeseries_custom_bmonthend_decr_n(self):\n    (self.date - (10 * self.cme))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bmonthend_decr_n.time_timeseries_custom_bmonthend_decr_n", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bmonthend_incr.time_timeseries_custom_bmonthend_incr": {
            "code": "def time_timeseries_custom_bmonthend_incr(self):\n    (self.date + self.cme)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bmonthend_incr.time_timeseries_custom_bmonthend_incr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_custom_bmonthend_incr_n.time_timeseries_custom_bmonthend_incr_n": {
            "code": "def time_timeseries_custom_bmonthend_incr_n(self):\n    (self.date + (10 * self.cme))\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_custom_bmonthend_incr_n.time_timeseries_custom_bmonthend_incr_n", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_datetimeindex_offset_delta.time_timeseries_datetimeindex_offset_delta": {
            "code": "def time_timeseries_datetimeindex_offset_delta(self):\n    (self.idx1 + self.delta_offset)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_datetimeindex_offset_delta.time_timeseries_datetimeindex_offset_delta", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_datetimeindex_offset_fast.time_timeseries_datetimeindex_offset_fast": {
            "code": "def time_timeseries_datetimeindex_offset_fast(self):\n    (self.idx1 + self.fast_offset)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_datetimeindex_offset_fast.time_timeseries_datetimeindex_offset_fast", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_datetimeindex_offset_slow.time_timeseries_datetimeindex_offset_slow": {
            "code": "def time_timeseries_datetimeindex_offset_slow(self):\n    (self.idx1 + self.slow_offset)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_datetimeindex_offset_slow.time_timeseries_datetimeindex_offset_slow", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_day_apply.time_timeseries_day_apply": {
            "code": "def time_timeseries_day_apply(self):\n    self.day.apply(self.date)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_day_apply.time_timeseries_day_apply", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_day_incr.time_timeseries_day_incr": {
            "code": "def time_timeseries_day_incr(self):\n    (self.date + self.day)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_day_incr.time_timeseries_day_incr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_infer_freq.time_timeseries_infer_freq": {
            "code": "def time_timeseries_infer_freq(self):\n    infer_freq(self.a)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_infer_freq.time_timeseries_infer_freq", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_is_month_start.time_timeseries_is_month_start": {
            "code": "def time_timeseries_is_month_start(self):\n    self.rng.is_month_start\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_is_month_start.time_timeseries_is_month_start", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_iter_datetimeindex.time_timeseries_iter_datetimeindex": {
            "code": "def time_timeseries_iter_datetimeindex(self):\n    self.iter_n(self.idx1)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_iter_datetimeindex.time_timeseries_iter_datetimeindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_iter_datetimeindex_preexit.time_timeseries_iter_datetimeindex_preexit": {
            "code": "def time_timeseries_iter_datetimeindex_preexit(self):\n    self.iter_n(self.idx1, self.M)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_iter_datetimeindex_preexit.time_timeseries_iter_datetimeindex_preexit", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_iter_periodindex.time_timeseries_iter_periodindex": {
            "code": "def time_timeseries_iter_periodindex(self):\n    self.iter_n(self.idx2)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_iter_periodindex.time_timeseries_iter_periodindex", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_iter_periodindex_preexit.time_timeseries_iter_periodindex_preexit": {
            "code": "def time_timeseries_iter_periodindex_preexit(self):\n    self.iter_n(self.idx2, self.M)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_iter_periodindex_preexit.time_timeseries_iter_periodindex_preexit", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_large_lookup_value.time_timeseries_large_lookup_value": {
            "code": "def time_timeseries_large_lookup_value(self):\n    self.ts[self.ts.index[(len(self.ts) // 2)]]\n    self.ts.index._cleanup()\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_large_lookup_value.time_timeseries_large_lookup_value", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_period_downsample_mean.time_timeseries_period_downsample_mean": {
            "code": "def time_timeseries_period_downsample_mean(self):\n    self.ts.resample('D', how='mean')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_period_downsample_mean.time_timeseries_period_downsample_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_resample_datetime64.time_timeseries_resample_datetime64": {
            "code": "def time_timeseries_resample_datetime64(self):\n    self.ts.resample('1S', how='last')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_resample_datetime64.time_timeseries_resample_datetime64", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_series_offset_delta.time_timeseries_series_offset_delta": {
            "code": "def time_timeseries_series_offset_delta(self):\n    (self.s + self.delta_offset)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_series_offset_delta.time_timeseries_series_offset_delta", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_series_offset_fast.time_timeseries_series_offset_fast": {
            "code": "def time_timeseries_series_offset_fast(self):\n    (self.s + self.fast_offset)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_series_offset_fast.time_timeseries_series_offset_fast", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_series_offset_slow.time_timeseries_series_offset_slow": {
            "code": "def time_timeseries_series_offset_slow(self):\n    (self.s + self.slow_offset)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_series_offset_slow.time_timeseries_series_offset_slow", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_slice_minutely.time_timeseries_slice_minutely": {
            "code": "def time_timeseries_slice_minutely(self):\n    self.ts[:10000]\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_slice_minutely.time_timeseries_slice_minutely", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_sort_index.time_timeseries_sort_index": {
            "code": "def time_timeseries_sort_index(self):\n    self.ts.sort_index()\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_sort_index.time_timeseries_sort_index", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_timestamp_downsample_mean.time_timeseries_timestamp_downsample_mean": {
            "code": "def time_timeseries_timestamp_downsample_mean(self):\n    self.ts.resample('D', how='mean')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_timestamp_downsample_mean.time_timeseries_timestamp_downsample_mean", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_timestamp_tzinfo_cons.time_timeseries_timestamp_tzinfo_cons": {
            "code": "def time_timeseries_timestamp_tzinfo_cons(self):\n    self.rng[0]\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_timestamp_tzinfo_cons.time_timeseries_timestamp_tzinfo_cons", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_to_datetime_YYYYMMDD.time_timeseries_to_datetime_YYYYMMDD": {
            "code": "def time_timeseries_to_datetime_YYYYMMDD(self):\n    to_datetime(self.strings, format='%Y%m%d')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_to_datetime_YYYYMMDD.time_timeseries_to_datetime_YYYYMMDD", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_to_datetime_iso8601.time_timeseries_to_datetime_iso8601": {
            "code": "def time_timeseries_to_datetime_iso8601(self):\n    to_datetime(self.strings)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_to_datetime_iso8601.time_timeseries_to_datetime_iso8601", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_to_datetime_iso8601_format.time_timeseries_to_datetime_iso8601_format": {
            "code": "def time_timeseries_to_datetime_iso8601_format(self):\n    to_datetime(self.strings, format='%Y-%m-%d %H:%M:%S')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_to_datetime_iso8601_format.time_timeseries_to_datetime_iso8601_format", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_with_format_no_exact.time_timeseries_with_format_no_exact": {
            "code": "def time_timeseries_with_format_no_exact(self):\n    to_datetime(self.s, format='%d%b%y', exact=False)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_with_format_no_exact.time_timeseries_with_format_no_exact", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_with_format_replace.time_timeseries_with_format_replace": {
            "code": "def time_timeseries_with_format_replace(self):\n    to_datetime(self.s.str.replace(':\\\\S+$', ''), format='%d%b%y')\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_with_format_replace.time_timeseries_with_format_replace", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_year_apply.time_timeseries_year_apply": {
            "code": "def time_timeseries_year_apply(self):\n    self.year.apply(self.date)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_year_apply.time_timeseries_year_apply", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "timeseries.timeseries_year_incr.time_timeseries_year_incr": {
            "code": "def time_timeseries_year_incr(self):\n    (self.date + self.year)\n", 
            "goal_time": 0.2, 
            "name": "timeseries.timeseries_year_incr.time_timeseries_year_incr", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }
    }, 
    "date_to_hash": {
        "1391301735000": "9266a389", 
        "1396356779000": "cf0ef428", 
        "1401450122000": "da0f7ae3", 
        "1404748822000": "4c79a115", 
        "1409898548000": "d2694c85", 
        "1413672736000": "017adeaa", 
        "1419909362000": "28fc02a9", 
        "1428943100000": "30580e7a", 
        "1433426744000": "24633ec8", 
        "1434192334000": "06832891", 
        "1439567242000": "7ed0b26d", 
        "1441988415000": "9687145e"
    }, 
    "extra_pages": [
        [
            "regressions", 
            "Show regressions", 
            "Display information about recent regressions"
        ]
    ], 
    "machines": {
        "069-jreback.home": {
            "arch": "x86_64", 
            "cpu": "Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz", 
            "machine": "069-jreback.home", 
            "os": "Darwin 13.4.0", 
            "ram": "16GB", 
            "version": 1
        }
    }, 
    "params": {
        "Cython": [
            null
        ], 
        "arch": [
            "x86_64"
        ], 
        "branch": [
            "master"
        ], 
        "cpu": [
            "Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz"
        ], 
        "machine": [
            "069-jreback.home"
        ], 
        "matplotlib": [
            null
        ], 
        "numexpr": [
            null
        ], 
        "numpy": [
            null
        ], 
        "openpyxl": [
            null
        ], 
        "os": [
            "Darwin 13.4.0"
        ], 
        "pytables": [
            null
        ], 
        "python": [
            "2.7"
        ], 
        "ram": [
            "16GB"
        ], 
        "scipy": [
            null
        ], 
        "sqlalchemy": [
            null
        ], 
        "xlrd": [
            null
        ], 
        "xlwt": [
            null
        ]
    }, 
    "project": "pandas", 
    "project_url": "http://pandas.pydata.org/", 
    "show_commit_url": "https://github.com/pydata/pandas/commit/", 
    "tags": {
        "0.3.0": 1298163988000, 
        "debian/0.4.0-1": 1316017084000, 
        "debian/0.4.1-1": 1317048249000, 
        "debian/0.4.3-1": 1318951906000, 
        "debian/0.5.0+git7-gcf32be2-1": 1320196542000, 
        "debian/0.6.1-1": 1325734840000, 
        "debian/0.7.0-1": 1328843532000, 
        "debian/0.7.1+git1-ga2e86c2-1": 1330658997000, 
        "debian/0.7.3-1": 1334276689000, 
        "debian/0.8.0-1": 1340991466000, 
        "debian/0.8.0-2": 1342184152000, 
        "debian/0.8.0_b2+git68-g7240b87-1": 1340247840000, 
        "debian/0.8.0_b2-1": 1339521874000, 
        "debian/0.8.0_rc2+git26-g76c6351-1": 1340820112000, 
        "debian/0.8.1-1": 1343003671000, 
        "v0.10.0": 1355762888000, 
        "v0.10.0b1": 1355269526000, 
        "v0.10.1": 1358831994000, 
        "v0.11.0": 1366678471000, 
        "v0.11.0rc1": 1365818352000, 
        "v0.12.0": 1374697106000, 
        "v0.12.0rc1": 1373346771000, 
        "v0.13.0": 1388422887000, 
        "v0.13.0_ahl1": 1389186315000, 
        "v0.13.0_ahl2": 1389878709000, 
        "v0.13.0rc1": 1385527286000, 
        "v0.13.1": 1391395738000, 
        "v0.14.0": 1401450122000, 
        "v0.14.0rc1": 1400278770000, 
        "v0.14.1": 1405035967000, 
        "v0.15.0": 1413672736000, 
        "v0.15.0rc1": 1412642319000, 
        "v0.15.1": 1415452422000, 
        "v0.15.2": 1418306362000, 
        "v0.15.2pre": 1416578711000, 
        "v0.15pre": 1410094321000, 
        "v0.16.0": 1427031398000, 
        "v0.16.0rc1": 1426255236000, 
        "v0.16.1": 1431306604000, 
        "v0.16.2": 1434192334000, 
        "v0.17.0rc1": 1441988415000, 
        "v0.4.0": 1315859521000, 
        "v0.4.1": 1317000085000, 
        "v0.4.2": 1317617173000, 
        "v0.4.3": 1318197429000, 
        "v0.5.0": 1319509932000, 
        "v0.6.0": 1322277354000, 
        "v0.6.1": 1323817436000, 
        "v0.7.0": 1328826175000, 
        "v0.7.0rc1": 1327034032000, 
        "v0.7.1": 1330553078000, 
        "v0.7.2": 1331927660000, 
        "v0.7.3": 1334253112000, 
        "v0.8.0": 1340986814000, 
        "v0.8.0b1": 1338253482000, 
        "v0.8.0b2": 1339519295000, 
        "v0.8.0rc1": 1340393682000, 
        "v0.8.0rc2": 1340394271000, 
        "v0.8.1": 1342986141000, 
        "v0.9.0": 1349655420000, 
        "v0.9.0rc1": 1348197360000, 
        "v0.9.0rc2": 1348710085000, 
        "v0.9.1": 1352940069000, 
        "v0.9.1rc1": 1352505519000
    }
}